{"version":3,"names":[],"mappings":"","sources":["systemjs/dist/system.src.js"],"sourcesContent":["/*\n * SystemJS v0.19.40\n */\n(function() {\nfunction bootstrap() {// from https://gist.github.com/Yaffle/1088850\n(function(global) {\nfunction URLPolyfill(url, baseURL) {\n  if (typeof url != 'string')\n    throw new TypeError('URL must be a string');\n  var m = String(url).replace(/^\\s+|\\s+$/g, \"\").match(/^([^:\\/?#]+:)?(?:\\/\\/(?:([^:@\\/?#]*)(?::([^:@\\/?#]*))?@)?(([^:\\/?#]*)(?::(\\d*))?))?([^?#]*)(\\?[^#]*)?(#[\\s\\S]*)?/);\n  if (!m)\n    throw new RangeError('Invalid URL format');\n  var protocol = m[1] || \"\";\n  var username = m[2] || \"\";\n  var password = m[3] || \"\";\n  var host = m[4] || \"\";\n  var hostname = m[5] || \"\";\n  var port = m[6] || \"\";\n  var pathname = m[7] || \"\";\n  var search = m[8] || \"\";\n  var hash = m[9] || \"\";\n  if (baseURL !== undefined) {\n    var base = baseURL instanceof URLPolyfill ? baseURL : new URLPolyfill(baseURL);\n    var flag = !protocol && !host && !username;\n    if (flag && !pathname && !search)\n      search = base.search;\n    if (flag && pathname[0] !== \"/\")\n      pathname = (pathname ? (((base.host || base.username) && !base.pathname ? \"/\" : \"\") + base.pathname.slice(0, base.pathname.lastIndexOf(\"/\") + 1) + pathname) : base.pathname);\n    // dot segments removal\n    var output = [];\n    pathname.replace(/^(\\.\\.?(\\/|$))+/, \"\")\n      .replace(/\\/(\\.(\\/|$))+/g, \"/\")\n      .replace(/\\/\\.\\.$/, \"/../\")\n      .replace(/\\/?[^\\/]*/g, function (p) {\n        if (p === \"/..\")\n          output.pop();\n        else\n          output.push(p);\n      });\n    pathname = output.join(\"\").replace(/^\\//, pathname[0] === \"/\" ? \"/\" : \"\");\n    if (flag) {\n      port = base.port;\n      hostname = base.hostname;\n      host = base.host;\n      password = base.password;\n      username = base.username;\n    }\n    if (!protocol)\n      protocol = base.protocol;\n  }\n\n  // convert URLs to use / always\n  pathname = pathname.replace(/\\\\/g, '/');\n\n  this.origin = host ? protocol + (protocol !== \"\" || host !== \"\" ? \"//\" : \"\") + host : \"\";\n  this.href = protocol + (protocol && host || protocol == \"file:\" ? \"//\" : \"\") + (username !== \"\" ? username + (password !== \"\" ? \":\" + password : \"\") + \"@\" : \"\") + host + pathname + search + hash;\n  this.protocol = protocol;\n  this.username = username;\n  this.password = password;\n  this.host = host;\n  this.hostname = hostname;\n  this.port = port;\n  this.pathname = pathname;\n  this.search = search;\n  this.hash = hash;\n}\nglobal.URLPolyfill = URLPolyfill;\n})(typeof self != 'undefined' ? self : global);(function(__global) {\n\n  var isWorker = typeof window == 'undefined' && typeof self != 'undefined' && typeof importScripts != 'undefined';\n  var isBrowser = typeof window != 'undefined' && typeof document != 'undefined';\n  var isWindows = typeof process != 'undefined' && typeof process.platform != 'undefined' && !!process.platform.match(/^win/);\n\n  if (!__global.console)\n    __global.console = { assert: function() {} };\n\n  // IE8 support\n  var indexOf = Array.prototype.indexOf || function(item) {\n    for (var i = 0, thisLen = this.length; i < thisLen; i++) {\n      if (this[i] === item) {\n        return i;\n      }\n    }\n    return -1;\n  };\n  \n  var defineProperty;\n  (function () {\n    try {\n      if (!!Object.defineProperty({}, 'a', {}))\n        defineProperty = Object.defineProperty;\n    }\n    catch (e) {\n      defineProperty = function(obj, prop, opt) {\n        try {\n          obj[prop] = opt.value || opt.get.call(obj);\n        }\n        catch(e) {}\n      }\n    }\n  })();\n\n  var errArgs = new Error(0, '_').fileName == '_';\n\n  function addToError(err, msg) {\n    // parse the stack removing loader code lines for simplification\n    if (!err.originalErr) {\n      var stack = ((err.message || err) + (err.stack ? '\\n' + err.stack : '')).toString().split('\\n');\n      var newStack = [];\n      for (var i = 0; i < stack.length; i++) {\n        if (typeof $__curScript == 'undefined' || stack[i].indexOf($__curScript.src) == -1)\n          newStack.push(stack[i]);\n      }\n    }\n\n    var newMsg = '(SystemJS) ' + (newStack ? newStack.join('\\n\\t') : err.message.substr(11)) + '\\n\\t' + msg;\n\n    // Convert file:/// URLs to paths in Node\n    if (!isBrowser)\n      newMsg = newMsg.replace(isWindows ? /file:\\/\\/\\//g : /file:\\/\\//g, '');\n\n    var newErr = errArgs ? new Error(newMsg, err.fileName, err.lineNumber) : new Error(newMsg);\n    \n    newErr.stack = newMsg;\n        \n    // track the original error\n    newErr.originalErr = err.originalErr || err;\n\n    return newErr;\n  }\n\n  function __eval(source, debugName, context) {\n    try {\n      new Function(source).call(context);\n    }\n    catch(e) {\n      throw addToError(e, 'Evaluating ' + debugName);\n    }\n  }\n\n  var baseURI;\n\n  // environent baseURI detection\n  if (typeof document != 'undefined' && document.getElementsByTagName) {\n    baseURI = document.baseURI;\n\n    if (!baseURI) {\n      var bases = document.getElementsByTagName('base');\n      baseURI = bases[0] && bases[0].href || window.location.href;\n    }\n  }\n  else if (typeof location != 'undefined') {\n    baseURI = __global.location.href;\n  }\n\n  // sanitize out the hash and querystring\n  if (baseURI) {\n    baseURI = baseURI.split('#')[0].split('?')[0];\n    baseURI = baseURI.substr(0, baseURI.lastIndexOf('/') + 1);\n  }\n  else if (typeof process != 'undefined' && process.cwd) {\n    baseURI = 'file://' + (isWindows ? '/' : '') + process.cwd() + '/';\n    if (isWindows)\n      baseURI = baseURI.replace(/\\\\/g, '/');\n  }\n  else {\n    throw new TypeError('No environment baseURI');\n  }\n\n  try {\n    var nativeURL = new __global.URL('test:///').protocol == 'test:';\n  }\n  catch(e) {}\n\n  var URL = nativeURL ? __global.URL : __global.URLPolyfill;\n\n/*\n*********************************************************************************************\n\n  Dynamic Module Loader Polyfill\n\n    - Implemented exactly to the former 2014-08-24 ES6 Specification Draft Rev 27, Section 15\n      http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#august_24_2014_draft_rev_27\n\n    - Functions are commented with their spec numbers, with spec differences commented.\n\n    - Spec bugs are commented in this code with links.\n\n    - Abstract functions have been combined where possible, and their associated functions\n      commented.\n\n    - Realm implementation is entirely omitted.\n\n*********************************************************************************************\n*/\n\nfunction Module() {}\n// http://www.ecma-international.org/ecma-262/6.0/#sec-@@tostringtag\ndefineProperty(Module.prototype, 'toString', {\n  value: function() {\n    return 'Module';\n  }\n});\nfunction Loader(options) {\n  this._loader = {\n    loaderObj: this,\n    loads: [],\n    modules: {},\n    importPromises: {},\n    moduleRecords: {}\n  };\n\n  // 26.3.3.6\n  defineProperty(this, 'global', {\n    get: function() {\n      return __global;\n    }\n  });\n\n  // 26.3.3.13 realm not implemented\n}\n\n(function() {\n\n// Some Helpers\n\n// logs a linkset snapshot for debugging\n/* function snapshot(loader) {\n  console.log('---Snapshot---');\n  for (var i = 0; i < loader.loads.length; i++) {\n    var load = loader.loads[i];\n    var linkSetLog = '  ' + load.name + ' (' + load.status + '): ';\n\n    for (var j = 0; j < load.linkSets.length; j++) {\n      linkSetLog += '{' + logloads(load.linkSets[j].loads) + '} ';\n    }\n    console.log(linkSetLog);\n  }\n  console.log('');\n}\nfunction logloads(loads) {\n  var log = '';\n  for (var k = 0; k < loads.length; k++)\n    log += loads[k].name + (k != loads.length - 1 ? ' ' : '');\n  return log;\n} */\n\n\n/* function checkInvariants() {\n  // see https://bugs.ecmascript.org/show_bug.cgi?id=2603#c1\n\n  var loads = System._loader.loads;\n  var linkSets = [];\n\n  for (var i = 0; i < loads.length; i++) {\n    var load = loads[i];\n    console.assert(load.status == 'loading' || load.status == 'loaded', 'Each load is loading or loaded');\n\n    for (var j = 0; j < load.linkSets.length; j++) {\n      var linkSet = load.linkSets[j];\n\n      for (var k = 0; k < linkSet.loads.length; k++)\n        console.assert(loads.indexOf(linkSet.loads[k]) != -1, 'linkSet loads are a subset of loader loads');\n\n      if (linkSets.indexOf(linkSet) == -1)\n        linkSets.push(linkSet);\n    }\n  }\n\n  for (var i = 0; i < loads.length; i++) {\n    var load = loads[i];\n    for (var j = 0; j < linkSets.length; j++) {\n      var linkSet = linkSets[j];\n\n      if (linkSet.loads.indexOf(load) != -1)\n        console.assert(load.linkSets.indexOf(linkSet) != -1, 'linkSet contains load -> load contains linkSet');\n\n      if (load.linkSets.indexOf(linkSet) != -1)\n        console.assert(linkSet.loads.indexOf(load) != -1, 'load contains linkSet -> linkSet contains load');\n    }\n  }\n\n  for (var i = 0; i < linkSets.length; i++) {\n    var linkSet = linkSets[i];\n    for (var j = 0; j < linkSet.loads.length; j++) {\n      var load = linkSet.loads[j];\n\n      for (var k = 0; k < load.dependencies.length; k++) {\n        var depName = load.dependencies[k].value;\n        var depLoad;\n        for (var l = 0; l < loads.length; l++) {\n          if (loads[l].name != depName)\n            continue;\n          depLoad = loads[l];\n          break;\n        }\n\n        // loading records are allowed not to have their dependencies yet\n        // if (load.status != 'loading')\n        //  console.assert(depLoad, 'depLoad found');\n\n        // console.assert(linkSet.loads.indexOf(depLoad) != -1, 'linkset contains all dependencies');\n      }\n    }\n  }\n} */\n\n  // 15.2.3 - Runtime Semantics: Loader State\n\n  // 15.2.3.11\n  function createLoaderLoad(object) {\n    return {\n      // modules is an object for ES5 implementation\n      modules: {},\n      loads: [],\n      loaderObj: object\n    };\n  }\n\n  // 15.2.3.2 Load Records and LoadRequest Objects\n\n  var anonCnt = 0;\n\n  // 15.2.3.2.1\n  function createLoad(name) {\n    return {\n      status: 'loading',\n      name: name || '<Anonymous' + ++anonCnt + '>',\n      linkSets: [],\n      dependencies: [],\n      metadata: {}\n    };\n  }\n\n  // 15.2.3.2.2 createLoadRequestObject, absorbed into calling functions\n\n  // 15.2.4\n\n  // 15.2.4.1\n  function loadModule(loader, name, options) {\n    return new Promise(asyncStartLoadPartwayThrough({\n      step: options.address ? 'fetch' : 'locate',\n      loader: loader,\n      moduleName: name,\n      // allow metadata for import https://bugs.ecmascript.org/show_bug.cgi?id=3091\n      moduleMetadata: options && options.metadata || {},\n      moduleSource: options.source,\n      moduleAddress: options.address\n    }));\n  }\n\n  // 15.2.4.2\n  function requestLoad(loader, request, refererName, refererAddress) {\n    // 15.2.4.2.1 CallNormalize\n    return new Promise(function(resolve, reject) {\n      resolve(loader.loaderObj.normalize(request, refererName, refererAddress));\n    })\n    // 15.2.4.2.2 GetOrCreateLoad\n    .then(function(name) {\n      var load;\n      if (loader.modules[name]) {\n        load = createLoad(name);\n        load.status = 'linked';\n        // https://bugs.ecmascript.org/show_bug.cgi?id=2795\n        load.module = loader.modules[name];\n        return load;\n      }\n\n      for (var i = 0, l = loader.loads.length; i < l; i++) {\n        load = loader.loads[i];\n        if (load.name != name)\n          continue;\n        return load;\n      }\n\n      load = createLoad(name);\n      loader.loads.push(load);\n\n      proceedToLocate(loader, load);\n\n      return load;\n    });\n  }\n\n  // 15.2.4.3\n  function proceedToLocate(loader, load) {\n    proceedToFetch(loader, load,\n      Promise.resolve()\n      // 15.2.4.3.1 CallLocate\n      .then(function() {\n        return loader.loaderObj.locate({ name: load.name, metadata: load.metadata });\n      })\n    );\n  }\n\n  // 15.2.4.4\n  function proceedToFetch(loader, load, p) {\n    proceedToTranslate(loader, load,\n      p\n      // 15.2.4.4.1 CallFetch\n      .then(function(address) {\n        // adjusted, see https://bugs.ecmascript.org/show_bug.cgi?id=2602\n        if (load.status != 'loading')\n          return;\n        load.address = address;\n\n        return loader.loaderObj.fetch({ name: load.name, metadata: load.metadata, address: address });\n      })\n    );\n  }\n\n  // 15.2.4.5\n  function proceedToTranslate(loader, load, p) {\n    p\n    // 15.2.4.5.1 CallTranslate\n    .then(function(source) {\n      if (load.status != 'loading')\n        return;\n\n      load.address = load.address || load.name;\n\n      return Promise.resolve(loader.loaderObj.translate({ name: load.name, metadata: load.metadata, address: load.address, source: source }))\n\n      // 15.2.4.5.2 CallInstantiate\n      .then(function(source) {\n        load.source = source;\n        return loader.loaderObj.instantiate({ name: load.name, metadata: load.metadata, address: load.address, source: source });\n      })\n\n      // 15.2.4.5.3 InstantiateSucceeded\n      .then(function(instantiateResult) {\n        if (instantiateResult === undefined)\n          throw new TypeError('Declarative modules unsupported in the polyfill.');\n        \n        if (typeof instantiateResult != 'object')\n          throw new TypeError('Invalid instantiate return value');\n\n        load.depsList = instantiateResult.deps || [];\n        load.execute = instantiateResult.execute;\n      })\n      // 15.2.4.6 ProcessLoadDependencies\n      .then(function() {\n        load.dependencies = [];\n        var depsList = load.depsList;\n\n        var loadPromises = [];\n        for (var i = 0, l = depsList.length; i < l; i++) (function(request, index) {\n          loadPromises.push(\n            requestLoad(loader, request, load.name, load.address)\n\n            // 15.2.4.6.1 AddDependencyLoad (load is parentLoad)\n            .then(function(depLoad) {\n\n              // adjusted from spec to maintain dependency order\n              // this is due to the System.register internal implementation needs\n              load.dependencies[index] = {\n                key: request,\n                value: depLoad.name\n              };\n\n              if (depLoad.status != 'linked') {\n                var linkSets = load.linkSets.concat([]);\n                for (var i = 0, l = linkSets.length; i < l; i++)\n                  addLoadToLinkSet(linkSets[i], depLoad);\n              }\n\n              // console.log('AddDependencyLoad ' + depLoad.name + ' for ' + load.name);\n              // snapshot(loader);\n            })\n          );\n        })(depsList[i], i);\n\n        return Promise.all(loadPromises);\n      })\n\n      // 15.2.4.6.2 LoadSucceeded\n      .then(function() {\n        // console.log('LoadSucceeded ' + load.name);\n        // snapshot(loader);\n\n        load.status = 'loaded';\n\n        var linkSets = load.linkSets.concat([]);\n        for (var i = 0, l = linkSets.length; i < l; i++)\n          updateLinkSetOnLoad(linkSets[i], load);\n      });\n    })\n    // 15.2.4.5.4 LoadFailed\n    ['catch'](function(exc) {\n      load.status = 'failed';\n      load.exception = exc;\n\n      var linkSets = load.linkSets.concat([]);\n      for (var i = 0, l = linkSets.length; i < l; i++) {\n        linkSetFailed(linkSets[i], load, exc);\n      }\n\n      console.assert(load.linkSets.length == 0, 'linkSets not removed');\n    });\n  }\n\n  // 15.2.4.7 PromiseOfStartLoadPartwayThrough absorbed into calling functions\n\n  // 15.2.4.7.1\n  function asyncStartLoadPartwayThrough(stepState) {\n    return function(resolve, reject) {\n      var loader = stepState.loader;\n      var name = stepState.moduleName;\n      var step = stepState.step;\n\n      if (loader.modules[name])\n        throw new TypeError('\"' + name + '\" already exists in the module table');\n\n      // adjusted to pick up existing loads\n      var existingLoad;\n      for (var i = 0, l = loader.loads.length; i < l; i++) {\n        if (loader.loads[i].name == name) {\n          existingLoad = loader.loads[i];\n\n          if (step == 'translate' && !existingLoad.source) {\n            existingLoad.address = stepState.moduleAddress;\n            proceedToTranslate(loader, existingLoad, Promise.resolve(stepState.moduleSource));\n          }\n\n          // a primary load -> use that existing linkset if it is for the direct load here\n          // otherwise create a new linkset unit\n          if (existingLoad.linkSets.length && existingLoad.linkSets[0].loads[0].name == existingLoad.name)\n            return existingLoad.linkSets[0].done.then(function() {\n              resolve(existingLoad);\n            });\n        }\n      }\n\n      var load = existingLoad || createLoad(name);\n\n      load.metadata = stepState.moduleMetadata;\n\n      var linkSet = createLinkSet(loader, load);\n\n      loader.loads.push(load);\n\n      resolve(linkSet.done);\n\n      if (step == 'locate')\n        proceedToLocate(loader, load);\n\n      else if (step == 'fetch')\n        proceedToFetch(loader, load, Promise.resolve(stepState.moduleAddress));\n\n      else {\n        console.assert(step == 'translate', 'translate step');\n        load.address = stepState.moduleAddress;\n        proceedToTranslate(loader, load, Promise.resolve(stepState.moduleSource));\n      }\n    }\n  }\n\n  // Declarative linking functions run through alternative implementation:\n  // 15.2.5.1.1 CreateModuleLinkageRecord not implemented\n  // 15.2.5.1.2 LookupExport not implemented\n  // 15.2.5.1.3 LookupModuleDependency not implemented\n\n  // 15.2.5.2.1\n  function createLinkSet(loader, startingLoad) {\n    var linkSet = {\n      loader: loader,\n      loads: [],\n      startingLoad: startingLoad, // added see spec bug https://bugs.ecmascript.org/show_bug.cgi?id=2995\n      loadingCount: 0\n    };\n    linkSet.done = new Promise(function(resolve, reject) {\n      linkSet.resolve = resolve;\n      linkSet.reject = reject;\n    });\n    addLoadToLinkSet(linkSet, startingLoad);\n    return linkSet;\n  }\n  // 15.2.5.2.2\n  function addLoadToLinkSet(linkSet, load) {\n    if (load.status == 'failed')\n      return;\n\n    for (var i = 0, l = linkSet.loads.length; i < l; i++)\n      if (linkSet.loads[i] == load)\n        return;\n\n    linkSet.loads.push(load);\n    load.linkSets.push(linkSet);\n\n    // adjustment, see https://bugs.ecmascript.org/show_bug.cgi?id=2603\n    if (load.status != 'loaded') {\n      linkSet.loadingCount++;\n    }\n\n    var loader = linkSet.loader;\n\n    for (var i = 0, l = load.dependencies.length; i < l; i++) {\n      if (!load.dependencies[i])\n        continue;\n\n      var name = load.dependencies[i].value;\n\n      if (loader.modules[name])\n        continue;\n\n      for (var j = 0, d = loader.loads.length; j < d; j++) {\n        if (loader.loads[j].name != name)\n          continue;\n\n        addLoadToLinkSet(linkSet, loader.loads[j]);\n        break;\n      }\n    }\n    // console.log('add to linkset ' + load.name);\n    // snapshot(linkSet.loader);\n  }\n\n  // linking errors can be generic or load-specific\n  // this is necessary for debugging info\n  function doLink(linkSet) {\n    var error = false;\n    try {\n      link(linkSet, function(load, exc) {\n        linkSetFailed(linkSet, load, exc);\n        error = true;\n      });\n    }\n    catch(e) {\n      linkSetFailed(linkSet, null, e);\n      error = true;\n    }\n    return error;\n  }\n\n  // 15.2.5.2.3\n  function updateLinkSetOnLoad(linkSet, load) {\n    // console.log('update linkset on load ' + load.name);\n    // snapshot(linkSet.loader);\n\n    console.assert(load.status == 'loaded' || load.status == 'linked', 'loaded or linked');\n\n    linkSet.loadingCount--;\n\n    if (linkSet.loadingCount > 0)\n      return;\n\n    // adjusted for spec bug https://bugs.ecmascript.org/show_bug.cgi?id=2995\n    var startingLoad = linkSet.startingLoad;\n\n    // non-executing link variation for loader tracing\n    // on the server. Not in spec.\n    /***/\n    if (linkSet.loader.loaderObj.execute === false) {\n      var loads = [].concat(linkSet.loads);\n      for (var i = 0, l = loads.length; i < l; i++) {\n        var load = loads[i];\n        load.module = {\n          name: load.name,\n          module: _newModule({}),\n          evaluated: true\n        };\n        load.status = 'linked';\n        finishLoad(linkSet.loader, load);\n      }\n      return linkSet.resolve(startingLoad);\n    }\n    /***/\n\n    var abrupt = doLink(linkSet);\n\n    if (abrupt)\n      return;\n\n    console.assert(linkSet.loads.length == 0, 'loads cleared');\n\n    linkSet.resolve(startingLoad);\n  }\n\n  // 15.2.5.2.4\n  function linkSetFailed(linkSet, load, exc) {\n    var loader = linkSet.loader;\n    var requests;\n\n    checkError: \n    if (load) {\n      if (linkSet.loads[0].name == load.name) {\n        exc = addToError(exc, 'Error loading ' + load.name);\n      }\n      else {\n        for (var i = 0; i < linkSet.loads.length; i++) {\n          var pLoad = linkSet.loads[i];\n          for (var j = 0; j < pLoad.dependencies.length; j++) {\n            var dep = pLoad.dependencies[j];\n            if (dep.value == load.name) {\n              exc = addToError(exc, 'Error loading ' + load.name + ' as \"' + dep.key + '\" from ' + pLoad.name);\n              break checkError;\n            }\n          }\n        }\n        exc = addToError(exc, 'Error loading ' + load.name + ' from ' + linkSet.loads[0].name);\n      }\n    }\n    else {\n      exc = addToError(exc, 'Error linking ' + linkSet.loads[0].name);\n    }\n\n\n    var loads = linkSet.loads.concat([]);\n    for (var i = 0, l = loads.length; i < l; i++) {\n      var load = loads[i];\n\n      // store all failed load records\n      loader.loaderObj.failed = loader.loaderObj.failed || [];\n      if (indexOf.call(loader.loaderObj.failed, load) == -1)\n        loader.loaderObj.failed.push(load);\n\n      var linkIndex = indexOf.call(load.linkSets, linkSet);\n      console.assert(linkIndex != -1, 'link not present');\n      load.linkSets.splice(linkIndex, 1);\n      if (load.linkSets.length == 0) {\n        var globalLoadsIndex = indexOf.call(linkSet.loader.loads, load);\n        if (globalLoadsIndex != -1)\n          linkSet.loader.loads.splice(globalLoadsIndex, 1);\n      }\n    }\n    linkSet.reject(exc);\n  }\n\n  // 15.2.5.2.5\n  function finishLoad(loader, load) {\n    // add to global trace if tracing\n    if (loader.loaderObj.trace) {\n      if (!loader.loaderObj.loads)\n        loader.loaderObj.loads = {};\n      var depMap = {};\n      load.dependencies.forEach(function(dep) {\n        depMap[dep.key] = dep.value;\n      });\n      loader.loaderObj.loads[load.name] = {\n        name: load.name,\n        deps: load.dependencies.map(function(dep){ return dep.key }),\n        depMap: depMap,\n        address: load.address,\n        metadata: load.metadata,\n        source: load.source\n      };\n    }\n    // if not anonymous, add to the module table\n    if (load.name) {\n      console.assert(!loader.modules[load.name] || loader.modules[load.name].module === load.module.module, 'load not in module table');\n      loader.modules[load.name] = load.module;\n    }\n    var loadIndex = indexOf.call(loader.loads, load);\n    if (loadIndex != -1)\n      loader.loads.splice(loadIndex, 1);\n    for (var i = 0, l = load.linkSets.length; i < l; i++) {\n      loadIndex = indexOf.call(load.linkSets[i].loads, load);\n      if (loadIndex != -1)\n        load.linkSets[i].loads.splice(loadIndex, 1);\n    }\n    load.linkSets.splice(0, load.linkSets.length);\n  }\n\n  function doDynamicExecute(linkSet, load, linkError) {\n    try {\n      var module = load.execute();\n    }\n    catch(e) {\n      linkError(load, e);\n      return;\n    }\n    if (!module || !(module instanceof Module))\n      linkError(load, new TypeError('Execution must define a Module instance'));\n    else\n      return module;\n  }\n\n  // 26.3 Loader\n\n  // 26.3.1.1\n  // defined at top\n\n  // importPromises adds ability to import a module twice without error - https://bugs.ecmascript.org/show_bug.cgi?id=2601\n  function createImportPromise(loader, name, promise) {\n    var importPromises = loader._loader.importPromises;\n    return importPromises[name] = promise.then(function(m) {\n      importPromises[name] = undefined;\n      return m;\n    }, function(e) {\n      importPromises[name] = undefined;\n      throw e;\n    });\n  }\n\n  Loader.prototype = {\n    // 26.3.3.1\n    constructor: Loader,\n    // 26.3.3.2\n    define: function(name, source, options) {\n      // check if already defined\n      if (this._loader.importPromises[name])\n        throw new TypeError('Module is already loading.');\n      return createImportPromise(this, name, new Promise(asyncStartLoadPartwayThrough({\n        step: 'translate',\n        loader: this._loader,\n        moduleName: name,\n        moduleMetadata: options && options.metadata || {},\n        moduleSource: source,\n        moduleAddress: options && options.address\n      })));\n    },\n    // 26.3.3.3\n    'delete': function(name) {\n      var loader = this._loader;\n      delete loader.importPromises[name];\n      delete loader.moduleRecords[name];\n      return loader.modules[name] ? delete loader.modules[name] : false;\n    },\n    // 26.3.3.4 entries not implemented\n    // 26.3.3.5\n    get: function(key) {\n      if (!this._loader.modules[key])\n        return;\n      return this._loader.modules[key].module;\n    },\n    // 26.3.3.7\n    has: function(name) {\n      return !!this._loader.modules[name];\n    },\n    // 26.3.3.8\n    'import': function(name, parentName, parentAddress) {\n      if (typeof parentName == 'object')\n        parentName = parentName.name;\n\n      // run normalize first\n      var loaderObj = this;\n\n      // added, see https://bugs.ecmascript.org/show_bug.cgi?id=2659\n      return Promise.resolve(loaderObj.normalize(name, parentName))\n      .then(function(name) {\n        var loader = loaderObj._loader;\n\n        if (loader.modules[name])\n          return loader.modules[name].module;\n\n        return loader.importPromises[name] || createImportPromise(loaderObj, name,\n          loadModule(loader, name, {})\n          .then(function(load) {\n            delete loader.importPromises[name];\n            return load.module.module;\n          }));\n      });\n    },\n    // 26.3.3.9 keys not implemented\n    // 26.3.3.10\n    load: function(name) {\n      var loader = this._loader;\n      if (loader.modules[name])\n        return Promise.resolve();\n      return loader.importPromises[name] || createImportPromise(this, name, new Promise(asyncStartLoadPartwayThrough({\n        step: 'locate',\n        loader: loader,\n        moduleName: name,\n        moduleMetadata: {},\n        moduleSource: undefined,\n        moduleAddress: undefined\n      }))\n      .then(function() {\n        delete loader.importPromises[name];\n      }));\n    },\n    // 26.3.3.11\n    module: function(source, options) {\n      var load = createLoad();\n      load.address = options && options.address;\n      var linkSet = createLinkSet(this._loader, load);\n      var sourcePromise = Promise.resolve(source);\n      var loader = this._loader;\n      var p = linkSet.done.then(function() {\n        return load.module.module;\n      });\n      proceedToTranslate(loader, load, sourcePromise);\n      return p;\n    },\n    // 26.3.3.12\n    newModule: function (obj) {\n      if (typeof obj != 'object')\n        throw new TypeError('Expected object');\n\n      var m = new Module();\n\n      var pNames = [];\n      if (Object.getOwnPropertyNames && obj != null)\n        pNames = Object.getOwnPropertyNames(obj);\n      else\n        for (var key in obj)\n          pNames.push(key);\n\n      for (var i = 0; i < pNames.length; i++) (function(key) {\n        defineProperty(m, key, {\n          configurable: false,\n          enumerable: true,\n          get: function () {\n            return obj[key];\n          },\n          set: function() {\n            throw new Error('Module exports cannot be changed externally.');\n          }\n        });\n      })(pNames[i]);\n\n      if (Object.freeze)\n        Object.freeze(m);\n\n      return m;\n    },\n    // 26.3.3.14\n    set: function(name, module) {\n      if (!(module instanceof Module))\n        throw new TypeError('Loader.set(' + name + ', module) must be a module');\n      this._loader.modules[name] = {\n        module: module\n      };\n    },\n    // 26.3.3.15 values not implemented\n    // 26.3.3.16 @@iterator not implemented\n    // 26.3.3.17 @@toStringTag not implemented\n\n    // 26.3.3.18.1\n    normalize: function(name, referrerName, referrerAddress) {},\n    // 26.3.3.18.2\n    locate: function(load) {\n      return load.name;\n    },\n    // 26.3.3.18.3\n    fetch: function(load) {\n    },\n    // 26.3.3.18.4\n    translate: function(load) {\n      return load.source;\n    },\n    // 26.3.3.18.5\n    instantiate: function(load) {\n    }\n  };\n\n  var _newModule = Loader.prototype.newModule;\n\n/*\n * ES6 Module Declarative Linking Code\n */\n  function link(linkSet, linkError) {\n\n    var loader = linkSet.loader;\n\n    if (!linkSet.loads.length)\n      return;\n\n    var loads = linkSet.loads.concat([]);\n\n    for (var i = 0; i < loads.length; i++) {\n      var load = loads[i];\n\n      var module = doDynamicExecute(linkSet, load, linkError);\n      if (!module)\n        return;\n      load.module = {\n        name: load.name,\n        module: module\n      };\n      load.status = 'linked';\n\n      finishLoad(loader, load);\n    }\n  }\n\n})();\n\nvar System;\n\n  var fetchTextFromURL;\n  if (typeof XMLHttpRequest != 'undefined') {\n    fetchTextFromURL = function(url, authorization, fulfill, reject) {\n      var xhr = new XMLHttpRequest();\n      var sameDomain = true;\n      var doTimeout = false;\n      if (!('withCredentials' in xhr)) {\n        // check if same domain\n        var domainCheck = /^(\\w+:)?\\/\\/([^\\/]+)/.exec(url);\n        if (domainCheck) {\n          sameDomain = domainCheck[2] === window.location.host;\n          if (domainCheck[1])\n            sameDomain &= domainCheck[1] === window.location.protocol;\n        }\n      }\n      if (!sameDomain && typeof XDomainRequest != 'undefined') {\n        xhr = new XDomainRequest();\n        xhr.onload = load;\n        xhr.onerror = error;\n        xhr.ontimeout = error;\n        xhr.onprogress = function() {};\n        xhr.timeout = 0;\n        doTimeout = true;\n      }\n      function load() {\n        fulfill(xhr.responseText);\n      }\n      function error() {\n        reject(new Error('XHR error' + (xhr.status ? ' (' + xhr.status + (xhr.statusText ? ' ' + xhr.statusText  : '') + ')' : '') + ' loading ' + url));\n      }\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          // in Chrome on file:/// URLs, status is 0\n          if (xhr.status == 0) {\n            if (xhr.responseText) {\n              load();\n            }\n            else {\n              // when responseText is empty, wait for load or error event\n              // to inform if it is a 404 or empty file\n              xhr.addEventListener('error', error);\n              xhr.addEventListener('load', load);\n            }\n          }\n          else if (xhr.status === 200) {\n            load();\n          }\n          else {\n            error();\n          }\n        }\n      };\n      xhr.open(\"GET\", url, true);\n\n      if (xhr.setRequestHeader) {\n        xhr.setRequestHeader('Accept', 'application/x-es-module, */*');\n        // can set \"authorization: true\" to enable withCredentials only\n        if (authorization) {\n          if (typeof authorization == 'string')\n            xhr.setRequestHeader('Authorization', authorization);\n          xhr.withCredentials = true;\n        }\n      }\n\n      if (doTimeout) {\n        setTimeout(function() {\n          xhr.send();\n        }, 0);\n      } else {\n        xhr.send(null);\n      }\n    };\n  }\n  else if (typeof require != 'undefined' && typeof process != 'undefined') {\n    var fs;\n    fetchTextFromURL = function(url, authorization, fulfill, reject) {\n      if (url.substr(0, 8) != 'file:///')\n        throw new Error('Unable to fetch \"' + url + '\". Only file URLs of the form file:/// allowed running in Node.');\n      fs = fs || require('fs');\n      if (isWindows)\n        url = url.replace(/\\//g, '\\\\').substr(8);\n      else\n        url = url.substr(7);\n      return fs.readFile(url, function(err, data) {\n        if (err) {\n          return reject(err);\n        }\n        else {\n          // Strip Byte Order Mark out if it's the leading char\n          var dataString = data + '';\n          if (dataString[0] === '\\ufeff')\n            dataString = dataString.substr(1);\n\n          fulfill(dataString);\n        }\n      });\n    };\n  }\n  else if (typeof self != 'undefined' && typeof self.fetch != 'undefined') {\n    fetchTextFromURL = function(url, authorization, fulfill, reject) {\n      var opts = {\n        headers: {'Accept': 'application/x-es-module, */*'}\n      };\n\n      if (authorization) {\n        if (typeof authorization == 'string')\n          opts.headers['Authorization'] = authorization;\n        opts.credentials = 'include';\n      }\n\n      fetch(url, opts)\n        .then(function (r) {\n          if (r.ok) {\n            return r.text();\n          } else {\n            throw new Error('Fetch error: ' + r.status + ' ' + r.statusText);\n          }\n        })\n        .then(fulfill, reject);\n    }\n  }\n  else {\n    throw new TypeError('No environment fetch API available.');\n  }\n/*\n * Traceur, Babel and TypeScript transpile hook for Loader\n */\nvar transpile = (function() {\n\n  // use Traceur by default\n  Loader.prototype.transpiler = 'traceur';\n\n  function transpile(load) {\n    var self = this;\n\n    return Promise.resolve(__global[self.transpiler == 'typescript' ? 'ts' : self.transpiler]\n        || (self.pluginLoader || self)['import'](self.transpiler))\n    .then(function(transpiler) {\n      if (transpiler.__useDefault)\n        transpiler = transpiler['default'];\n\n      var transpileFunction;\n      if (transpiler.Compiler)\n        transpileFunction = traceurTranspile;\n      else if (transpiler.createLanguageService)\n        transpileFunction = typescriptTranspile;\n      else\n        transpileFunction = babelTranspile;\n\n      // note __moduleName will be part of the transformer meta in future when we have the spec for this\n      return '(function(__moduleName){' + transpileFunction.call(self, load, transpiler) + '\\n})(\"' + load.name + '\");\\n//# sourceURL=' + load.address + '!transpiled';\n    });\n  };\n\n  function traceurTranspile(load, traceur) {\n    var options = this.traceurOptions || {};\n    options.modules = 'instantiate';\n    options.script = false;\n    if (options.sourceMaps === undefined)\n      options.sourceMaps = 'inline';\n    options.filename = load.address;\n    options.inputSourceMap = load.metadata.sourceMap;\n    options.moduleName = false;\n\n    var compiler = new traceur.Compiler(options);\n\n    return doTraceurCompile(load.source, compiler, options.filename);\n  }\n  function doTraceurCompile(source, compiler, filename) {\n    try {\n      return compiler.compile(source, filename);\n    }\n    catch(e) {\n      // on older versions of traceur (<0.9.3), an array of errors is thrown\n      // rather than a single error.\n      if (e.length) {\n        throw e[0];\n      }\n      throw e;\n    }\n  }\n\n  function babelTranspile(load, babel) {\n    var options = this.babelOptions || {};\n    options.modules = 'system';\n    if (options.sourceMap === undefined)\n      options.sourceMap = 'inline';\n    options.inputSourceMap = load.metadata.sourceMap;\n    options.filename = load.address;\n    options.code = true;\n    options.ast = false;\n\n    return babel.transform(load.source, options).code;\n  }\n\n  function typescriptTranspile(load, ts) {\n    var options = this.typescriptOptions || {};\n    options.target = options.target || ts.ScriptTarget.ES5;\n    if (options.sourceMap === undefined)\n      options.sourceMap = true;\n    if (options.sourceMap && options.inlineSourceMap !== false)\n      options.inlineSourceMap = true;\n\n    options.module = ts.ModuleKind.System;\n\n    return ts.transpile(load.source, options, load.address);\n  }\n\n  return transpile;\n})();\n// SystemJS Loader Class and Extension helpers\nfunction SystemJSLoader() {\n  Loader.call(this);\n\n  this.paths = {};\n  this._loader.paths = {};\n\n  systemJSConstructor.call(this);\n}\n\n// inline Object.create-style class extension\nfunction SystemProto() {};\nSystemProto.prototype = Loader.prototype;\nSystemJSLoader.prototype = new SystemProto();\nSystemJSLoader.prototype.constructor = SystemJSLoader;\n\nvar systemJSConstructor;\n\nfunction hook(name, hook) {\n  SystemJSLoader.prototype[name] = hook(SystemJSLoader.prototype[name] || function() {});\n}\nfunction hookConstructor(hook) {\n  systemJSConstructor = hook(systemJSConstructor || function() {});\n}\n\n\nvar absURLRegEx = /^[^\\/]+:\\/\\//;\nfunction isAbsolute(name) {\n  return name.match(absURLRegEx);\n}\nfunction isRel(name) {\n  return (name[0] == '.' && (!name[1] || name[1] == '/' || name[1] == '.')) || name[0] == '/';\n}\nfunction isPlain(name) {\n  return !isRel(name) && !isAbsolute(name);\n}\n\nvar baseURIObj = new URL(baseURI);\n\nfunction urlResolve(name, parent) {\n  // url resolution shortpaths\n  if (name[0] == '.') {\n    // dot-relative url normalization\n    if (name[1] == '/' && name[2] != '.')\n      return (parent && parent.substr(0, parent.lastIndexOf('/') + 1) || baseURI) + name.substr(2);\n  }\n  else if (name[0] != '/' && name.indexOf(':') == -1) {\n    // plain parent normalization\n    return (parent && parent.substr(0, parent.lastIndexOf('/') + 1) || baseURI) + name;\n  }\n\n  return new URL(name, parent && parent.replace(/#/g, '%05') || baseURIObj).href.replace(/%05/g, '#');\n}\n\n// NB no specification provided for System.paths, used ideas discussed in https://github.com/jorendorff/js-loaders/issues/25\nfunction applyPaths(loader, name) {\n  // most specific (most number of slashes in path) match wins\n  var pathMatch = '', wildcard, maxWildcardPrefixLen = 0;\n\n  var paths = loader.paths;\n  var pathsCache = loader._loader.paths;\n\n  // check to see if we have a paths entry\n  for (var p in paths) {\n    if (paths.hasOwnProperty && !paths.hasOwnProperty(p))\n      continue;\n\n    // paths sanitization\n    var path = paths[p];\n    if (path !== pathsCache[p])\n      path = paths[p] = pathsCache[p] = urlResolve(paths[p], isRel(paths[p]) ? baseURI : loader.baseURL);\n\n    // exact path match\n    if (p.indexOf('*') === -1) {\n      if (name == p)\n        return paths[p];\n      \n      // support trailing / in paths rules\n      else if (name.substr(0, p.length - 1) == p.substr(0, p.length - 1) && (name.length < p.length || name[p.length - 1] == p[p.length - 1]) && (paths[p][paths[p].length - 1] == '/' || paths[p] == '')) {\n        return paths[p].substr(0, paths[p].length - 1) + (name.length > p.length ? (paths[p] && '/' || '') + name.substr(p.length) : '');\n      }\n    }\n    // wildcard path match\n    else {\n      var pathParts = p.split('*');\n      if (pathParts.length > 2)\n        throw new TypeError('Only one wildcard in a path is permitted');\n\n      var wildcardPrefixLen = pathParts[0].length;\n      if (wildcardPrefixLen >= maxWildcardPrefixLen &&\n          name.substr(0, pathParts[0].length) == pathParts[0] &&\n          name.substr(name.length - pathParts[1].length) == pathParts[1]) {\n            maxWildcardPrefixLen = wildcardPrefixLen;\n            pathMatch = p;\n            wildcard = name.substr(pathParts[0].length, name.length - pathParts[1].length - pathParts[0].length);\n          }\n    }\n  }\n\n  var outPath = paths[pathMatch];\n  if (typeof wildcard == 'string')\n    outPath = outPath.replace('*', wildcard);\n\n  return outPath;\n}\n\nfunction dedupe(deps) {\n  var newDeps = [];\n  for (var i = 0, l = deps.length; i < l; i++)\n    if (indexOf.call(newDeps, deps[i]) == -1)\n      newDeps.push(deps[i])\n  return newDeps;\n}\n\nfunction group(deps) {\n  var names = [];\n  var indices = [];\n  for (var i = 0, l = deps.length; i < l; i++) {\n    var index = indexOf.call(names, deps[i]);\n    if (index === -1) {\n      names.push(deps[i]);\n      indices.push([i]);\n    }\n    else {\n      indices[index].push(i);\n    }\n  }\n  return { names: names, indices: indices };\n}\n\nvar getOwnPropertyDescriptor = true;\ntry {\n  Object.getOwnPropertyDescriptor({ a: 0 }, 'a');\n}\ncatch(e) {\n  getOwnPropertyDescriptor = false;\n}\n\n// converts any module.exports object into an object ready for SystemJS.newModule\nfunction getESModule(exports) {\n  var esModule = {};\n  // don't trigger getters/setters in environments that support them\n  if ((typeof exports == 'object' || typeof exports == 'function') && exports !== __global) {\n      if (getOwnPropertyDescriptor) {\n        for (var p in exports) {\n          // The default property is copied to esModule later on\n          if (p === 'default')\n            continue;\n          defineOrCopyProperty(esModule, exports, p);\n        }\n      }\n      else {\n        extend(esModule, exports);\n      }\n  }\n  esModule['default'] = exports;\n  defineProperty(esModule, '__useDefault', {\n    value: true\n  });\n  return esModule;\n}\n\nfunction defineOrCopyProperty(targetObj, sourceObj, propName) {\n  try {\n    var d;\n    if (d = Object.getOwnPropertyDescriptor(sourceObj, propName))\n      defineProperty(targetObj, propName, d);\n  }\n  catch (ex) {\n    // Object.getOwnPropertyDescriptor threw an exception, fall back to normal set property\n    // we dont need hasOwnProperty here because getOwnPropertyDescriptor would have returned undefined above\n    targetObj[propName] = sourceObj[propName];\n    return false;\n  }\n}\n\nfunction extend(a, b, prepend) {\n  var hasOwnProperty = b && b.hasOwnProperty;\n  for (var p in b) {\n    if (hasOwnProperty && !b.hasOwnProperty(p))\n      continue;\n    if (!prepend || !(p in a))\n      a[p] = b[p];\n  }\n  return a;\n}\n\n// meta first-level extends where:\n// array + array appends\n// object + object extends\n// other properties replace\nfunction extendMeta(a, b, prepend) {\n  var hasOwnProperty = b && b.hasOwnProperty;\n  for (var p in b) {\n    if (hasOwnProperty && !b.hasOwnProperty(p))\n      continue;\n    var val = b[p];\n    if (!(p in a))\n      a[p] = val;\n    else if (val instanceof Array && a[p] instanceof Array)\n      a[p] = [].concat(prepend ? val : a[p]).concat(prepend ? a[p] : val);\n    else if (typeof val == 'object' && val !== null && typeof a[p] == 'object')\n      a[p] = extend(extend({}, a[p]), val, prepend);\n    else if (!prepend)\n      a[p] = val;\n  }\n}\n\nfunction extendPkgConfig(pkgCfgA, pkgCfgB, pkgName, loader, warnInvalidProperties) {\n  for (var prop in pkgCfgB) {\n    if (indexOf.call(['main', 'format', 'defaultExtension', 'basePath'], prop) != -1) {\n      pkgCfgA[prop] = pkgCfgB[prop];\n    }\n    else if (prop == 'map') {\n      extend(pkgCfgA.map = pkgCfgA.map || {}, pkgCfgB.map);\n    }\n    else if (prop == 'meta') {\n      extend(pkgCfgA.meta = pkgCfgA.meta || {}, pkgCfgB.meta);\n    }\n    else if (prop == 'depCache') {\n      for (var d in pkgCfgB.depCache) {\n        var dNormalized;\n\n        if (d.substr(0, 2) == './')\n          dNormalized = pkgName + '/' + d.substr(2);\n        else\n          dNormalized = coreResolve.call(loader, d);\n        loader.depCache[dNormalized] = (loader.depCache[dNormalized] || []).concat(pkgCfgB.depCache[d]);\n      }\n    }\n    else if (warnInvalidProperties && indexOf.call(['browserConfig', 'nodeConfig', 'devConfig', 'productionConfig'], prop) == -1 && \n        (!pkgCfgB.hasOwnProperty || pkgCfgB.hasOwnProperty(prop))) {\n      warn.call(loader, '\"' + prop + '\" is not a valid package configuration option in package ' + pkgName);\n    }\n  }\n}\n\n// deeply-merge (to first level) config with any existing package config\nfunction setPkgConfig(loader, pkgName, cfg, prependConfig) {\n  var pkg;\n\n  // first package is config by reference for fast path, cloned after that\n  if (!loader.packages[pkgName]) {\n    pkg = loader.packages[pkgName] = cfg;\n  }\n  else {\n    var basePkg = loader.packages[pkgName];\n    pkg = loader.packages[pkgName] = {};\n\n    extendPkgConfig(pkg, prependConfig ? cfg : basePkg, pkgName, loader, prependConfig);\n    extendPkgConfig(pkg, prependConfig ? basePkg : cfg, pkgName, loader, !prependConfig);\n  }\n  \n  // main object becomes main map\n  if (typeof pkg.main == 'object') {\n    pkg.map = pkg.map || {};\n    pkg.map['./@main'] = pkg.main;\n    pkg.main['default'] = pkg.main['default'] || './';\n    pkg.main = '@main';\n  }\n\n  return pkg;\n}\n\nfunction warn(msg) {\n  if (this.warnings && typeof console != 'undefined' && console.warn)\n    console.warn(msg);\n}\n// we define a __exec for globally-scoped execution\n// used by module format implementations\nvar __exec;\n\n(function() {\n\n  var hasBuffer = typeof Buffer != 'undefined';\n  try {\n    if (hasBuffer && new Buffer('a').toString('base64') != 'YQ==')\n      hasBuffer = false;\n  }\n  catch(e) {\n    hasBuffer = false;\n  }\n\n  var sourceMapPrefix = '\\n//# sourceMappingURL=data:application/json;base64,';\n  function inlineSourceMap(sourceMapString) {\n    if (hasBuffer)\n      return sourceMapPrefix + new Buffer(sourceMapString).toString('base64');\n    else if (typeof btoa != 'undefined')\n      return sourceMapPrefix + btoa(unescape(encodeURIComponent(sourceMapString)));\n    else\n      return '';\n  }\n\n  function getSource(load, wrap) {\n    var lastLineIndex = load.source.lastIndexOf('\\n');\n\n    // wrap ES formats with a System closure for System global encapsulation\n    if (load.metadata.format == 'global')\n      wrap = false;\n\n    var sourceMap = load.metadata.sourceMap;\n    if (sourceMap) {\n      if (typeof sourceMap != 'object')\n        throw new TypeError('load.metadata.sourceMap must be set to an object.');\n\n      sourceMap = JSON.stringify(sourceMap);\n    }\n\n    return (wrap ? '(function(System, SystemJS) {' : '') + load.source + (wrap ? '\\n})(System, System);' : '')\n        // adds the sourceURL comment if not already present\n        + (load.source.substr(lastLineIndex, 15) != '\\n//# sourceURL='\n          ? '\\n//# sourceURL=' + load.address + (sourceMap ? '!transpiled' : '') : '')\n        // add sourceMappingURL if load.metadata.sourceMap is set\n        + (sourceMap && inlineSourceMap(sourceMap) || '');\n  }\n\n  var curLoad;\n\n  // System.register, System.registerDynamic, AMD define pipeline\n  // if currently evalling code here, immediately reduce the registered entry against the load record\n  hook('pushRegister_', function() {\n    return function(register) {\n      if (!curLoad)\n        return false;\n\n      this.reduceRegister_(curLoad, register);\n      return true;\n    };\n  });\n\n  // System clobbering protection (mostly for Traceur)\n  var curSystem;\n  var callCounter = 0;\n  function preExec(loader, load) {\n    curLoad = load;\n    if (callCounter++ == 0)\n      curSystem = __global.System;\n    __global.System = __global.SystemJS = loader;\n  }\n  function postExec() {\n    if (--callCounter == 0)\n      __global.System = __global.SystemJS = curSystem;\n    curLoad = undefined;\n  }\n\n  var useVm;\n  var vm;\n  __exec = function(load) {\n    if (!load.source)\n      return;\n    if ((load.metadata.integrity || load.metadata.nonce) && supportsScriptExec)\n      return scriptExec.call(this, load);\n    try {\n      preExec(this, load);\n      curLoad = load;\n      // global scoped eval for node (avoids require scope leak)\n      if (!vm && this._nodeRequire) {\n        vm = this._nodeRequire('vm');\n        useVm = vm.runInThisContext(\"typeof System !== 'undefined' && System\") === this;\n      }\n      if (useVm)\n        vm.runInThisContext(getSource(load, true), { filename: load.address + (load.metadata.sourceMap ? '!transpiled' : '') });\n      else\n        (0, eval)(getSource(load, true));\n      postExec();\n    }\n    catch(e) {\n      postExec();\n      throw addToError(e, 'Evaluating ' + load.address);\n    }\n  };\n\n  var supportsScriptExec = false;\n  if (isBrowser && typeof document != 'undefined' && document.getElementsByTagName) {\n    if (!(window.chrome && window.chrome.extension || navigator.userAgent.match(/^Node\\.js/)))\n      supportsScriptExec = true;\n  }\n\n  // script execution via injecting a script tag into the page\n  // this allows CSP integrity and nonce to be set for CSP environments\n  var head;\n  function scriptExec(load) {\n    if (!head)\n      head = document.head || document.body || document.documentElement;\n\n    var script = document.createElement('script');\n    script.text = getSource(load, false);\n    var onerror = window.onerror;\n    var e;\n    window.onerror = function(_e) {\n      e = addToError(_e, 'Evaluating ' + load.address);\n      if (onerror)\n        onerror.apply(this, arguments);\n    }\n    preExec(this, load);\n\n    if (load.metadata.integrity)\n      script.setAttribute('integrity', load.metadata.integrity);\n    if (load.metadata.nonce)\n      script.setAttribute('nonce', load.metadata.nonce);\n\n    head.appendChild(script);\n    head.removeChild(script);\n    postExec();\n    window.onerror = onerror;\n    if (e)\n      throw e;\n  }\n\n})();\nfunction readMemberExpression(p, value) {\n  var pParts = p.split('.');\n  while (pParts.length)\n    value = value[pParts.shift()];\n  return value;\n}\n\nfunction getMapMatch(map, name) {\n  var bestMatch, bestMatchLength = 0;\n\n  for (var p in map) {\n    if (name.substr(0, p.length) == p && (name.length == p.length || name[p.length] == '/')) {\n      var curMatchLength = p.split('/').length;\n      if (curMatchLength <= bestMatchLength)\n        continue;\n      bestMatch = p;\n      bestMatchLength = curMatchLength;\n    }\n  }\n\n  return bestMatch;\n}\n\nfunction prepareBaseURL(loader) {\n  // ensure baseURl is fully normalized\n  if (this._loader.baseURL !== this.baseURL) {\n    if (this.baseURL[this.baseURL.length - 1] != '/')\n      this.baseURL += '/';\n    \n    this._loader.baseURL = this.baseURL = new URL(this.baseURL, baseURIObj).href;\n  }\n}\n\nvar envModule;\nfunction setProduction(isProduction, isBuilder) {\n  this.set('@system-env', envModule = this.newModule({\n    browser: isBrowser,\n    node: !!this._nodeRequire,\n    production: !isBuilder && isProduction,\n    dev: isBuilder || !isProduction,\n    build: isBuilder,\n    'default': true\n  }));\n}\n\nhookConstructor(function(constructor) {\n  return function() {\n    constructor.call(this);\n\n    // support baseURL\n    this.baseURL = baseURI;\n\n    // support map and paths\n    this.map = {};\n\n    // make the location of the system.js script accessible\n    if (typeof $__curScript != 'undefined')\n      this.scriptSrc = $__curScript.src;\n\n    // global behaviour flags\n    this.warnings = false;\n    this.defaultJSExtensions = false;\n    this.pluginFirst = false;\n    this.loaderErrorStack = false;\n\n    // by default load \".json\" files as json\n    // leading * meta doesn't need normalization\n    // NB add this in next breaking release\n    // this.meta['*.json'] = { format: 'json' };\n\n    // support the empty module, as a concept\n    this.set('@empty', this.newModule({}));\n\n    setProduction.call(this, false, false);\n  };\n});\n\n// include the node require since we're overriding it\nif (typeof require != 'undefined' && typeof process != 'undefined' && !process.browser)\n  SystemJSLoader.prototype._nodeRequire = require;\n\n/*\n  Core SystemJS Normalization\n\n  If a name is relative, we apply URL normalization to the page\n  If a name is an absolute URL, we leave it as-is\n\n  Plain names (neither of the above) run through the map and paths\n  normalization phases.\n\n  The paths normalization phase applies last (paths extension), which\n  defines the `decanonicalize` function and normalizes everything into\n  a URL.\n */\n\nvar parentModuleContext;\nfunction getNodeModule(name, baseURL) {\n  if (!isPlain(name))\n    throw new Error('Node module ' + name + ' can\\'t be loaded as it is not a package require.');\n\n  if (!parentModuleContext) {\n    var Module = this._nodeRequire('module');\n    var base = baseURL.substr(isWindows ? 8 : 7);\n    parentModuleContext = new Module(base);\n    parentModuleContext.paths = Module._nodeModulePaths(base);\n  }\n  return parentModuleContext.require(name);\n}\n\nfunction coreResolve(name, parentName) {\n  // standard URL resolution\n  if (isRel(name))\n    return urlResolve(name, parentName);\n  else if (isAbsolute(name))\n    return name;\n\n  // plain names not starting with './', '://' and '/' go through custom resolution\n  var mapMatch = getMapMatch(this.map, name);\n\n  if (mapMatch) {\n    name = this.map[mapMatch] + name.substr(mapMatch.length);\n\n    if (isRel(name))\n      return urlResolve(name);\n    else if (isAbsolute(name))\n      return name;\n  }\n\n  if (this.has(name))\n    return name;\n  \n  // dynamically load node-core modules when requiring `@node/fs` for example\n  if (name.substr(0, 6) == '@node/') {\n    if (!this._nodeRequire)\n      throw new TypeError('Error loading ' + name + '. Can only load node core modules in Node.');\n    if (this.builder)\n      this.set(name, this.newModule({}));\n    else\n      this.set(name, this.newModule(getESModule(getNodeModule.call(this, name.substr(6), this.baseURL))));\n    return name;\n  }\n\n  // prepare the baseURL to ensure it is normalized\n  prepareBaseURL.call(this);\n\n  return applyPaths(this, name) || this.baseURL + name;\n}\n\nhook('normalize', function(normalize) {\n  return function(name, parentName, skipExt) {\n    var resolved = coreResolve.call(this, name, parentName);\n    if (this.defaultJSExtensions && !skipExt && resolved.substr(resolved.length - 3, 3) != '.js' && !isPlain(resolved))\n      resolved += '.js';\n    return resolved;\n  };\n});\n\n// percent encode just '#' in urls if using HTTP requests\nvar httpRequest = typeof XMLHttpRequest != 'undefined';\nhook('locate', function(locate) {\n  return function(load) {\n    return Promise.resolve(locate.call(this, load))\n    .then(function(address) {\n      if (httpRequest)\n        return address.replace(/#/g, '%23');\n      return address;\n    });\n  };\n});\n\n/*\n * Fetch with authorization\n */\nhook('fetch', function() {\n  return function(load) {\n    return new Promise(function(resolve, reject) {\n      fetchTextFromURL(load.address, load.metadata.authorization, resolve, reject);\n    });\n  };\n});\n\n/*\n  __useDefault\n  \n  When a module object looks like:\n  newModule(\n    __useDefault: true,\n    default: 'some-module'\n  })\n\n  Then importing that module provides the 'some-module'\n  result directly instead of the full module.\n\n  Useful for eg module.exports = function() {}\n*/\nhook('import', function(systemImport) {\n  return function(name, parentName, parentAddress) {\n    if (parentName && parentName.name)\n      warn.call(this, 'SystemJS.import(name, { name: parentName }) is deprecated for SystemJS.import(name, parentName), while importing ' + name + ' from ' + parentName.name);\n    return systemImport.call(this, name, parentName, parentAddress).then(function(module) {\n      return module.__useDefault ? module['default'] : module;\n    });\n  };\n});\n\n/*\n * Allow format: 'detect' meta to enable format detection\n */\nhook('translate', function(systemTranslate) {\n  return function(load) {\n    if (load.metadata.format == 'detect')\n      load.metadata.format = undefined;\n    return systemTranslate.apply(this, arguments);\n  };\n});\n\n\n/*\n * JSON format support\n *\n * Supports loading JSON files as a module format itself\n *\n * Usage:\n *\n * SystemJS.config({\n *   meta: {\n *     '*.json': { format: 'json' }\n *   }\n * });\n *\n * Module is returned as if written:\n *\n * export default {JSON}\n *\n * No named exports are provided\n *\n * Files ending in \".json\" are treated as json automatically by SystemJS\n */\nhook('instantiate', function(instantiate) {\n  return function(load) {\n    if (load.metadata.format == 'json' && !this.builder) {\n      var entry = load.metadata.entry = createEntry();\n      entry.deps = [];\n      entry.execute = function() {\n        try {\n          return JSON.parse(load.source);\n        }\n        catch(e) {\n          throw new Error(\"Invalid JSON file \" + load.name);\n        }\n      };\n    }\n  };\n})\n\n/*\n Extend config merging one deep only\n\n  loader.config({\n    some: 'random',\n    config: 'here',\n    deep: {\n      config: { too: 'too' }\n    }\n  });\n\n  <=>\n\n  loader.some = 'random';\n  loader.config = 'here'\n  loader.deep = loader.deep || {};\n  loader.deep.config = { too: 'too' };\n\n\n  Normalizes meta and package configs allowing for:\n\n  SystemJS.config({\n    meta: {\n      './index.js': {}\n    }\n  });\n\n  To become\n\n  SystemJS.meta['https://thissite.com/index.js'] = {};\n\n  For easy normalization canonicalization with latest URL support.\n\n*/\nfunction envSet(loader, cfg, envCallback) {\n  if (envModule.browser && cfg.browserConfig)\n    envCallback(cfg.browserConfig);\n  if (envModule.node && cfg.nodeConfig)\n    envCallback(cfg.nodeConfig);\n  if (envModule.dev && cfg.devConfig)\n    envCallback(cfg.devConfig);\n  if (envModule.build && cfg.buildConfig)\n    envCallback(cfg.buildConfig);\n  if (envModule.production && cfg.productionConfig)\n    envCallback(cfg.productionConfig);\n}\n\nSystemJSLoader.prototype.getConfig = function(name) {\n  var cfg = {};\n  var loader = this;\n  for (var p in loader) {\n    if (loader.hasOwnProperty && !loader.hasOwnProperty(p) || p in SystemJSLoader.prototype && p != 'transpiler')\n      continue;\n    if (indexOf.call(['_loader', 'amdDefine', 'amdRequire', 'defined', 'failed', 'version', 'loads'], p) == -1)\n      cfg[p] = loader[p];\n  }\n  cfg.production = envModule.production;\n  return cfg;\n};\n\nvar curCurScript;\nSystemJSLoader.prototype.config = function(cfg, isEnvConfig) {\n  var loader = this;\n\n  if ('loaderErrorStack' in cfg) {\n    curCurScript = $__curScript;\n    if (cfg.loaderErrorStack)\n      $__curScript = undefined;\n    else\n      $__curScript = curCurScript;\n  }\n\n  if ('warnings' in cfg)\n    loader.warnings = cfg.warnings;\n\n  // transpiler deprecation path\n  if (cfg.transpilerRuntime === false)\n    loader._loader.loadedTranspilerRuntime = true;\n\n  if ('production' in cfg || 'build' in cfg)\n    setProduction.call(loader, !!cfg.production, !!(cfg.build || envModule && envModule.build));\n\n  if (!isEnvConfig) {\n    // if using nodeConfig / browserConfig / productionConfig, take baseURL from there\n    // these exceptions will be unnecessary when we can properly implement config queuings\n    var baseURL;\n    envSet(loader, cfg, function(cfg) {\n      baseURL = baseURL || cfg.baseURL;\n    });\n    baseURL = baseURL || cfg.baseURL;\n\n    // always configure baseURL first\n    if (baseURL) {\n      var hasConfig = false;\n      function checkHasConfig(obj) {\n        for (var p in obj)\n          if (obj.hasOwnProperty(p))\n            return true;\n      }\n      if (checkHasConfig(loader.packages) || checkHasConfig(loader.meta) || checkHasConfig(loader.depCache) || checkHasConfig(loader.bundles) || checkHasConfig(loader.packageConfigPaths))\n        throw new TypeError('Incorrect configuration order. The baseURL must be configured with the first SystemJS.config call.');\n\n      this.baseURL = baseURL;\n      prepareBaseURL.call(this);\n    }\n\n    if (cfg.paths)\n      extend(loader.paths, cfg.paths);\n\n    envSet(loader, cfg, function(cfg) {\n      if (cfg.paths)\n        extend(loader.paths, cfg.paths);\n    });\n\n    // warn on wildcard path deprecations\n    if (this.warnings) {\n      for (var p in loader.paths)\n        if (p.indexOf('*') != -1)\n          warn.call(loader, 'Paths configuration \"' + p + '\" -> \"' + loader.paths[p] + '\" uses wildcards which are being deprecated for simpler trailing \"/\" folder paths.');\n    }\n  }\n\n  if (cfg.defaultJSExtensions) {\n    loader.defaultJSExtensions = cfg.defaultJSExtensions;\n    warn.call(loader, 'The defaultJSExtensions configuration option is deprecated, use packages configuration instead.');\n  }\n\n  if (cfg.pluginFirst)\n    loader.pluginFirst = cfg.pluginFirst;\n\n  if (cfg.map) {\n    var objMaps = '';\n    for (var p in cfg.map) {\n      var v = cfg.map[p];\n\n      // object map backwards-compat into packages configuration\n      if (typeof v !== 'string') {\n        objMaps += (objMaps.length ? ', ' : '') + '\"' + p + '\"';\n\n        var defaultJSExtension = loader.defaultJSExtensions && p.substr(p.length - 3, 3) != '.js';\n        var prop = loader.decanonicalize(p);\n        if (defaultJSExtension && prop.substr(prop.length - 3, 3) == '.js')\n          prop = prop.substr(0, prop.length - 3);\n\n        // if a package main, revert it\n        var pkgMatch = '';\n        for (var pkg in loader.packages) {\n          if (prop.substr(0, pkg.length) == pkg \n              && (!prop[pkg.length] || prop[pkg.length] == '/') \n              && pkgMatch.split('/').length < pkg.split('/').length)\n            pkgMatch = pkg;\n        }\n        if (pkgMatch && loader.packages[pkgMatch].main)\n          prop = prop.substr(0, prop.length - loader.packages[pkgMatch].main.length - 1);\n\n        var pkg = loader.packages[prop] = loader.packages[prop] || {};\n        pkg.map = v;\n      }\n      else {\n        loader.map[p] = v;\n      }\n    }\n    if (objMaps)\n      warn.call(loader, 'The map configuration for ' + objMaps + ' uses object submaps, which is deprecated in global map.\\nUpdate this to use package contextual map with configs like SystemJS.config({ packages: { \"' + p + '\": { map: {...} } } }).');\n  }\n\n  if (cfg.packageConfigPaths) {\n    var packageConfigPaths = [];\n    for (var i = 0; i < cfg.packageConfigPaths.length; i++) {\n      var path = cfg.packageConfigPaths[i];\n      var packageLength = Math.max(path.lastIndexOf('*') + 1, path.lastIndexOf('/'));\n      var normalized = coreResolve.call(loader, path.substr(0, packageLength));\n      packageConfigPaths[i] = normalized + path.substr(packageLength);\n    }\n    loader.packageConfigPaths = packageConfigPaths;\n  }\n\n  if (cfg.bundles) {\n    for (var p in cfg.bundles) {\n      var bundle = [];\n      for (var i = 0; i < cfg.bundles[p].length; i++) {\n        var defaultJSExtension = loader.defaultJSExtensions && cfg.bundles[p][i].substr(cfg.bundles[p][i].length - 3, 3) != '.js';\n        var normalizedBundleDep = loader.decanonicalize(cfg.bundles[p][i]);\n        if (defaultJSExtension && normalizedBundleDep.substr(normalizedBundleDep.length - 3, 3) == '.js')\n          normalizedBundleDep = normalizedBundleDep.substr(0, normalizedBundleDep.length - 3);\n        bundle.push(normalizedBundleDep);\n      }\n      loader.bundles[p] = bundle;\n    }\n  }\n\n  if (cfg.packages) {\n    for (var p in cfg.packages) {\n      if (p.match(/^([^\\/]+:)?\\/\\/$/))\n        throw new TypeError('\"' + p + '\" is not a valid package name.');\n\n      var prop = coreResolve.call(loader, p);\n\n      // allow trailing slash in packages\n      if (prop[prop.length - 1] == '/')\n        prop = prop.substr(0, prop.length - 1);\n\n      setPkgConfig(loader, prop, cfg.packages[p], false);\n    }\n  }\n\n  for (var c in cfg) {\n    var v = cfg[c];\n\n    if (indexOf.call(['baseURL', 'map', 'packages', 'bundles', 'paths', 'warnings', 'packageConfigPaths', \n          'loaderErrorStack', 'browserConfig', 'nodeConfig', 'devConfig', 'buildConfig', 'productionConfig'], c) != -1)\n      continue;\n\n    if (typeof v != 'object' || v instanceof Array) {\n      loader[c] = v;\n    }\n    else {\n      loader[c] = loader[c] || {};\n\n      for (var p in v) {\n        // base-level wildcard meta does not normalize to retain catch-all quality\n        if (c == 'meta' && p[0] == '*') {\n          extend(loader[c][p] = loader[c][p] || {}, v[p]);\n        }\n        else if (c == 'meta') {\n          // meta can go through global map, with defaultJSExtensions adding\n          var resolved = coreResolve.call(loader, p);\n          if (loader.defaultJSExtensions && resolved.substr(resolved.length - 3, 3) != '.js' && !isPlain(resolved))\n            resolved += '.js';\n          extend(loader[c][resolved] = loader[c][resolved] || {}, v[p]);\n        }\n        else if (c == 'depCache') {\n          var defaultJSExtension = loader.defaultJSExtensions && p.substr(p.length - 3, 3) != '.js';\n          var prop = loader.decanonicalize(p);\n          if (defaultJSExtension && prop.substr(prop.length - 3, 3) == '.js')\n            prop = prop.substr(0, prop.length - 3);\n          loader[c][prop] = [].concat(v[p]);\n        }\n        else {\n          loader[c][p] = v[p];\n        }\n      }\n    }\n  }\n\n  envSet(loader, cfg, function(cfg) {\n    loader.config(cfg, true);\n  });\n};/*\n * Package Configuration Extension\n *\n * Example:\n *\n * SystemJS.packages = {\n *   jquery: {\n *     main: 'index.js', // when not set, package name is requested directly\n *     format: 'amd',\n *     defaultExtension: 'ts', // defaults to 'js', can be set to false\n *     modules: {\n *       '*.ts': {\n *         loader: 'typescript'\n *       },\n *       'vendor/sizzle.js': {\n *         format: 'global'\n *       }\n *     },\n *     map: {\n *        // map internal require('sizzle') to local require('./vendor/sizzle')\n *        sizzle: './vendor/sizzle.js',\n *        // map any internal or external require of 'jquery/vendor/another' to 'another/index.js'\n *        './vendor/another.js': './another/index.js',\n *        // test.js / test -> lib/test.js\n *        './test.js': './lib/test.js',\n *\n *        // environment-specific map configurations\n *        './index.js': {\n *          '~browser': './index-node.js',\n *          './custom-condition.js|~export': './index-custom.js'\n *        }\n *     },\n *     // allows for setting package-prefixed depCache\n *     // keys are normalized module names relative to the package itself\n *     depCache: {\n *       // import 'package/index.js' loads in parallel package/lib/test.js,package/vendor/sizzle.js\n *       './index.js': ['./test'],\n *       './test.js': ['external-dep'],\n *       'external-dep/path.js': ['./another.js']\n *     }\n *   }\n * };\n *\n * Then:\n *   import 'jquery'                       -> jquery/index.js\n *   import 'jquery/submodule'             -> jquery/submodule.js\n *   import 'jquery/submodule.ts'          -> jquery/submodule.ts loaded as typescript\n *   import 'jquery/vendor/another'        -> another/index.js\n *\n * Detailed Behaviours\n * - main can have a leading \"./\" can be added optionally\n * - map and defaultExtension are applied to the main\n * - defaultExtension adds the extension only if the exact extension is not present\n * - defaultJSExtensions applies after map when defaultExtension is not set\n * - if a meta value is available for a module, map and defaultExtension are skipped\n * - like global map, package map also applies to subpaths (sizzle/x, ./vendor/another/sub)\n * - condition module map is '@env' module in package or '@system-env' globally\n * - map targets support conditional interpolation ('./x': './x.#{|env}.js')\n * - internal package map targets cannot use boolean conditionals\n *\n * Package Configuration Loading\n *\n * Not all packages may already have their configuration present in the System config\n * For these cases, a list of packageConfigPaths can be provided, which when matched against\n * a request, will first request a \".json\" file by the package name to derive the package\n * configuration from. This allows dynamic loading of non-predetermined code, a key use\n * case in SystemJS.\n *\n * Example:\n *\n *   SystemJS.packageConfigPaths = ['packages/test/package.json', 'packages/*.json'];\n *\n *   // will first request 'packages/new-package/package.json' for the package config\n *   // before completing the package request to 'packages/new-package/path'\n *   SystemJS.import('packages/new-package/path');\n *\n *   // will first request 'packages/test/package.json' before the main\n *   SystemJS.import('packages/test');\n *\n * When a package matches packageConfigPaths, it will always send a config request for\n * the package configuration.\n * The package name itself is taken to be the match up to and including the last wildcard\n * or trailing slash.\n * The most specific package config path will be used.\n * Any existing package configurations for the package will deeply merge with the\n * package config, with the existing package configurations taking preference.\n * To opt-out of the package configuration request for a package that matches\n * packageConfigPaths, use the { configured: true } package config option.\n *\n */\n(function() {\n\n  hookConstructor(function(constructor) {\n    return function() {\n      constructor.call(this);\n      this.packages = {};\n      this.packageConfigPaths = [];\n    };\n  });\n\n  function getPackage(loader, normalized) {\n    // use most specific package\n    var curPkg, curPkgLen = 0, pkgLen;\n    for (var p in loader.packages) {\n      if (normalized.substr(0, p.length) === p && (normalized.length === p.length || normalized[p.length] === '/')) {\n        pkgLen = p.split('/').length;\n        if (pkgLen > curPkgLen) {\n          curPkg = p;\n          curPkgLen = pkgLen;\n        }\n      }\n    }\n    return curPkg;\n  }\n\n  function addDefaultExtension(loader, pkg, pkgName, subPath, skipExtensions) {\n    // don't apply extensions to folders or if defaultExtension = false\n    if (!subPath || subPath[subPath.length - 1] == '/' || skipExtensions || pkg.defaultExtension === false)\n      return subPath;\n\n    var metaMatch = false;\n\n    // exact meta or meta with any content after the last wildcard skips extension\n    if (pkg.meta)\n      getMetaMatches(pkg.meta, subPath, function(metaPattern, matchMeta, matchDepth) {\n        if (matchDepth == 0 || metaPattern.lastIndexOf('*') != metaPattern.length - 1)\n          return metaMatch = true;\n      });\n\n    // exact global meta or meta with any content after the last wildcard skips extension\n    if (!metaMatch && loader.meta)\n      getMetaMatches(loader.meta, pkgName + '/' + subPath, function(metaPattern, matchMeta, matchDepth) {\n        if (matchDepth == 0 || metaPattern.lastIndexOf('*') != metaPattern.length - 1)\n          return metaMatch = true;\n      });\n\n    if (metaMatch)\n      return subPath;\n\n    // work out what the defaultExtension is and add if not there already\n    // NB reconsider if default should really be \".js\"?\n    var defaultExtension = '.' + (pkg.defaultExtension || 'js');\n    if (subPath.substr(subPath.length - defaultExtension.length) != defaultExtension)\n      return subPath + defaultExtension;\n    else\n      return subPath;\n  }\n\n  function applyPackageConfigSync(loader, pkg, pkgName, subPath, skipExtensions) {\n    // main\n    if (!subPath) {\n      if (pkg.main)\n        subPath = pkg.main.substr(0, 2) == './' ? pkg.main.substr(2) : pkg.main;\n      // also no submap if name is package itself (import 'pkg' -> 'path/to/pkg.js')\n      else\n        // NB can add a default package main convention here when defaultJSExtensions is deprecated\n        // if it becomes internal to the package then it would no longer be an exit path\n        return pkgName + (loader.defaultJSExtensions ? '.js' : '');\n    }\n\n    // map config checking without then with extensions\n    if (pkg.map) {\n      var mapPath = './' + subPath;\n\n      var mapMatch = getMapMatch(pkg.map, mapPath);\n\n      // we then check map with the default extension adding\n      if (!mapMatch) {\n        mapPath = './' + addDefaultExtension(loader, pkg, pkgName, subPath, skipExtensions);\n        if (mapPath != './' + subPath)\n          mapMatch = getMapMatch(pkg.map, mapPath);\n      }\n      if (mapMatch) {\n        var mapped = doMapSync(loader, pkg, pkgName, mapMatch, mapPath, skipExtensions);\n        if (mapped)\n          return mapped;\n      }\n    }\n\n    // normal package resolution\n    return pkgName + '/' + addDefaultExtension(loader, pkg, pkgName, subPath, skipExtensions);\n  }\n\n  function validMapping(mapMatch, mapped, pkgName, path) {\n    // disallow internal to subpath maps\n    if (mapMatch == '.')\n      throw new Error('Package ' + pkgName + ' has a map entry for \".\" which is not permitted.');\n    \n    // allow internal ./x -> ./x/y or ./x/ -> ./x/y recursive maps\n    // but only if the path is exactly ./x and not ./x/z\n    if (mapped.substr(0, mapMatch.length) == mapMatch && path.length > mapMatch.length)\n      return false;\n\n    return true;\n  }\n\n  function doMapSync(loader, pkg, pkgName, mapMatch, path, skipExtensions) {\n    if (path[path.length - 1] == '/')\n      path = path.substr(0, path.length - 1);\n    var mapped = pkg.map[mapMatch];\n\n    if (typeof mapped == 'object')\n      throw new Error('Synchronous conditional normalization not supported sync normalizing ' + mapMatch + ' in ' + pkgName);\n\n    if (!validMapping(mapMatch, mapped, pkgName, path) || typeof mapped != 'string')\n      return;\n\n    // package map to main / base-level\n    if (mapped == '.')\n      mapped = pkgName;\n\n    // internal package map\n    else if (mapped.substr(0, 2) == './')\n      return pkgName + '/' + addDefaultExtension(loader, pkg, pkgName, mapped.substr(2) + path.substr(mapMatch.length), skipExtensions);\n    \n    // external map reference\n    return loader.normalizeSync(mapped + path.substr(mapMatch.length), pkgName + '/');\n  }\n\n  function applyPackageConfig(loader, pkg, pkgName, subPath, skipExtensions) {\n    // main\n    if (!subPath) {\n      if (pkg.main)\n        subPath = pkg.main.substr(0, 2) == './' ? pkg.main.substr(2) : pkg.main;\n      // also no submap if name is package itself (import 'pkg' -> 'path/to/pkg.js')\n      else\n        // NB can add a default package main convention here when defaultJSExtensions is deprecated\n        // if it becomes internal to the package then it would no longer be an exit path\n        return Promise.resolve(pkgName + (loader.defaultJSExtensions ? '.js' : ''));\n    }\n\n    // map config checking without then with extensions\n    var mapPath, mapMatch;\n\n    if (pkg.map) {\n      mapPath = './' + subPath;\n      mapMatch = getMapMatch(pkg.map, mapPath);\n\n      // we then check map with the default extension adding\n      if (!mapMatch) {\n        mapPath = './' + addDefaultExtension(loader, pkg, pkgName, subPath, skipExtensions);\n        if (mapPath != './' + subPath)\n          mapMatch = getMapMatch(pkg.map, mapPath);\n      }\n    }\n\n    return (mapMatch ? doMap(loader, pkg, pkgName, mapMatch, mapPath, skipExtensions) : Promise.resolve())\n    .then(function(mapped) {\n      if (mapped)\n        return Promise.resolve(mapped);\n\n      // normal package resolution / fallback resolution for no conditional match\n      return Promise.resolve(pkgName + '/' + addDefaultExtension(loader, pkg, pkgName, subPath, skipExtensions));\n    });\n  }\n\n  function doStringMap(loader, pkg, pkgName, mapMatch, mapped, path, skipExtensions) {\n    // NB the interpolation cases should strictly skip subsequent interpolation\n    // package map to main / base-level\n    if (mapped == '.')\n      mapped = pkgName;\n    \n    // internal package map\n    else if (mapped.substr(0, 2) == './')\n      return Promise.resolve(pkgName + '/' + addDefaultExtension(loader, pkg, pkgName, mapped.substr(2) + path.substr(mapMatch.length), skipExtensions))\n      .then(function(name) {\n        return interpolateConditional.call(loader, name, pkgName + '/');\n      });\n    \n    // external map reference\n    return loader.normalize(mapped + path.substr(mapMatch.length), pkgName + '/');\n  }\n\n  function doMap(loader, pkg, pkgName, mapMatch, path, skipExtensions) {\n    if (path[path.length - 1] == '/')\n      path = path.substr(0, path.length - 1);\n\n    var mapped = pkg.map[mapMatch];\n\n    if (typeof mapped == 'string') {\n      if (!validMapping(mapMatch, mapped, pkgName, path))\n        return Promise.resolve();\n      return doStringMap(loader, pkg, pkgName, mapMatch, mapped, path, skipExtensions);\n    }\n\n    // we use a special conditional syntax to allow the builder to handle conditional branch points further\n    if (loader.builder)\n      return Promise.resolve(pkgName + '/#:' + path);\n\n    // we load all conditions upfront\n    var conditionPromises = [];\n    var conditions = [];\n    for (var e in mapped) {\n      var c = parseCondition(e);\n      conditions.push({\n        condition: c,\n        map: mapped[e]\n      });\n      conditionPromises.push(loader['import'](c.module, pkgName));\n    }\n\n    // map object -> conditional map\n    return Promise.all(conditionPromises)\n    .then(function(conditionValues) {\n      // first map condition to match is used\n      for (var i = 0; i < conditions.length; i++) {\n        var c = conditions[i].condition;\n        var value = readMemberExpression(c.prop, conditionValues[i]);\n        if (!c.negate && value || c.negate && !value)\n          return conditions[i].map;\n      }\n    })\n    .then(function(mapped) {\n      if (mapped) {\n        if (!validMapping(mapMatch, mapped, pkgName, path))\n          return;\n        return doStringMap(loader, pkg, pkgName, mapMatch, mapped, path, skipExtensions);\n      }\n\n      // no environment match -> fallback to original subPath by returning undefined\n    });\n  }\n\n  // normalizeSync = decanonicalize + package resolution\n  SystemJSLoader.prototype.normalizeSync = SystemJSLoader.prototype.decanonicalize = SystemJSLoader.prototype.normalize;\n\n  // decanonicalize must JUST handle package defaultExtension: false case when defaultJSExtensions is set\n  // to be deprecated!\n  hook('decanonicalize', function(decanonicalize) {\n    return function(name, parentName) {\n      if (this.builder)\n        return decanonicalize.call(this, name, parentName, true);\n\n      var decanonicalized = decanonicalize.call(this, name, parentName, false);\n\n      if (!this.defaultJSExtensions)\n        return decanonicalized;\n    \n      var pkgName = getPackage(this, decanonicalized);\n\n      var pkg = this.packages[pkgName];\n      var defaultExtension = pkg && pkg.defaultExtension;\n\n      if (defaultExtension == undefined && pkg && pkg.meta)\n        getMetaMatches(pkg.meta, decanonicalized.substr(pkgName), function(metaPattern, matchMeta, matchDepth) {\n          if (matchDepth == 0 || metaPattern.lastIndexOf('*') != metaPattern.length - 1) {\n            defaultExtension = false;\n            return true;\n          }\n        });\n      \n      if ((defaultExtension === false || defaultExtension && defaultExtension != '.js') && name.substr(name.length - 3, 3) != '.js' && decanonicalized.substr(decanonicalized.length - 3, 3) == '.js')\n        decanonicalized = decanonicalized.substr(0, decanonicalized.length - 3);\n\n      return decanonicalized;\n    };\n  });\n\n  hook('normalizeSync', function(normalizeSync) {\n    return function(name, parentName, isPlugin) {\n      var loader = this;\n      isPlugin = isPlugin === true;\n\n      // apply contextual package map first\n      // (we assume the parent package config has already been loaded)\n      if (parentName)\n        var parentPackageName = getPackage(loader, parentName) ||\n            loader.defaultJSExtensions && parentName.substr(parentName.length - 3, 3) == '.js' &&\n            getPackage(loader, parentName.substr(0, parentName.length - 3));\n\n      var parentPackage = parentPackageName && loader.packages[parentPackageName];\n\n      // ignore . since internal maps handled by standard package resolution\n      if (parentPackage && name[0] != '.') {\n        var parentMap = parentPackage.map;\n        var parentMapMatch = parentMap && getMapMatch(parentMap, name);\n\n        if (parentMapMatch && typeof parentMap[parentMapMatch] == 'string') {\n          var mapped = doMapSync(loader, parentPackage, parentPackageName, parentMapMatch, name, isPlugin);      \n          if (mapped)\n            return mapped;\n        }\n      }\n\n      var defaultJSExtension = loader.defaultJSExtensions && name.substr(name.length - 3, 3) != '.js';\n\n      // apply map, core, paths, contextual package map\n      var normalized = normalizeSync.call(loader, name, parentName, false);\n\n      // undo defaultJSExtension\n      if (defaultJSExtension && normalized.substr(normalized.length - 3, 3) != '.js')\n        defaultJSExtension = false;\n      if (defaultJSExtension)\n        normalized = normalized.substr(0, normalized.length - 3);\n\n      var pkgConfigMatch = getPackageConfigMatch(loader, normalized);\n      var pkgName = pkgConfigMatch && pkgConfigMatch.packageName || getPackage(loader, normalized);\n\n      if (!pkgName)\n        return normalized + (defaultJSExtension ? '.js' : '');\n\n      var subPath = normalized.substr(pkgName.length + 1);\n\n      return applyPackageConfigSync(loader, loader.packages[pkgName] || {}, pkgName, subPath, isPlugin);\n    };\n  });\n\n  hook('normalize', function(normalize) {\n    return function(name, parentName, isPlugin) {\n      var loader = this;\n      isPlugin = isPlugin === true;\n\n      return Promise.resolve()\n      .then(function() {\n        // apply contextual package map first\n        // (we assume the parent package config has already been loaded)\n        if (parentName)\n          var parentPackageName = getPackage(loader, parentName) ||\n              loader.defaultJSExtensions && parentName.substr(parentName.length - 3, 3) == '.js' &&\n              getPackage(loader, parentName.substr(0, parentName.length - 3));\n\n        var parentPackage = parentPackageName && loader.packages[parentPackageName];\n\n        // ignore . since internal maps handled by standard package resolution\n        if (parentPackage && name.substr(0, 2) != './') {\n          var parentMap = parentPackage.map;\n          var parentMapMatch = parentMap && getMapMatch(parentMap, name);\n\n          if (parentMapMatch)\n            return doMap(loader, parentPackage, parentPackageName, parentMapMatch, name, isPlugin);\n        }\n\n        return Promise.resolve();\n      })\n      .then(function(mapped) {\n        if (mapped)\n          return mapped;\n\n        var defaultJSExtension = loader.defaultJSExtensions && name.substr(name.length - 3, 3) != '.js';\n\n        // apply map, core, paths, contextual package map\n        var normalized = normalize.call(loader, name, parentName, false);\n\n        // undo defaultJSExtension\n        if (defaultJSExtension && normalized.substr(normalized.length - 3, 3) != '.js')\n          defaultJSExtension = false;\n        if (defaultJSExtension)\n          normalized = normalized.substr(0, normalized.length - 3);\n\n        var pkgConfigMatch = getPackageConfigMatch(loader, normalized);\n        var pkgName = pkgConfigMatch && pkgConfigMatch.packageName || getPackage(loader, normalized);\n\n        if (!pkgName)\n          return Promise.resolve(normalized + (defaultJSExtension ? '.js' : ''));\n\n        var pkg = loader.packages[pkgName];\n\n        // if package is already configured or not a dynamic config package, use existing package config\n        var isConfigured = pkg && (pkg.configured || !pkgConfigMatch);\n        return (isConfigured ? Promise.resolve(pkg) : loadPackageConfigPath(loader, pkgName, pkgConfigMatch.configPath))\n        .then(function(pkg) {\n          var subPath = normalized.substr(pkgName.length + 1);\n\n          return applyPackageConfig(loader, pkg, pkgName, subPath, isPlugin);\n        });\n      });\n    };\n  });\n\n  // check if the given normalized name matches a packageConfigPath\n  // if so, loads the config\n  var packageConfigPaths = {};\n\n  // data object for quick checks against package paths\n  function createPkgConfigPathObj(path) {\n    var lastWildcard = path.lastIndexOf('*');\n    var length = Math.max(lastWildcard + 1, path.lastIndexOf('/'));\n    return {\n      length: length,\n      regEx: new RegExp('^(' + path.substr(0, length).replace(/[.+?^${}()|[\\]\\\\]/g, '\\\\$&').replace(/\\*/g, '[^\\\\/]+') + ')(\\\\/|$)'),\n      wildcard: lastWildcard != -1\n    };\n  }\n\n  // most specific match wins\n  function getPackageConfigMatch(loader, normalized) {\n    var pkgName, exactMatch = false, configPath;\n    for (var i = 0; i < loader.packageConfigPaths.length; i++) {\n      var packageConfigPath = loader.packageConfigPaths[i];\n      var p = packageConfigPaths[packageConfigPath] || (packageConfigPaths[packageConfigPath] = createPkgConfigPathObj(packageConfigPath));\n      if (normalized.length < p.length)\n        continue;\n      var match = normalized.match(p.regEx);\n      if (match && (!pkgName || (!(exactMatch && p.wildcard) && pkgName.length < match[1].length))) {\n        pkgName = match[1];\n        exactMatch = !p.wildcard;\n        configPath = pkgName + packageConfigPath.substr(p.length);\n      }\n    }\n\n    if (!pkgName)\n      return;\n\n    return {\n      packageName: pkgName,\n      configPath: configPath\n    };\n  }\n\n  function loadPackageConfigPath(loader, pkgName, pkgConfigPath) {\n    var configLoader = loader.pluginLoader || loader;\n\n    // NB remove this when json is default\n    (configLoader.meta[pkgConfigPath] = configLoader.meta[pkgConfigPath] || {}).format = 'json';\n    configLoader.meta[pkgConfigPath].loader = null;\n\n    return configLoader.load(pkgConfigPath)\n    .then(function() {\n      var cfg = configLoader.get(pkgConfigPath)['default'];\n\n      // support \"systemjs\" prefixing\n      if (cfg.systemjs)\n        cfg = cfg.systemjs;\n\n      // modules backwards compatibility\n      if (cfg.modules) {\n        cfg.meta = cfg.modules;\n        warn.call(loader, 'Package config file ' + pkgConfigPath + ' is configured with \"modules\", which is deprecated as it has been renamed to \"meta\".');\n      }\n\n      return setPkgConfig(loader, pkgName, cfg, true);\n    });\n  }\n\n  function getMetaMatches(pkgMeta, subPath, matchFn) {\n    // wildcard meta\n    var meta = {};\n    var wildcardIndex;\n    for (var module in pkgMeta) {\n      // allow meta to start with ./ for flexibility\n      var dotRel = module.substr(0, 2) == './' ? './' : '';\n      if (dotRel)\n        module = module.substr(2);\n\n      wildcardIndex = module.indexOf('*');\n      if (wildcardIndex === -1)\n        continue;\n\n      if (module.substr(0, wildcardIndex) == subPath.substr(0, wildcardIndex)\n          && module.substr(wildcardIndex + 1) == subPath.substr(subPath.length - module.length + wildcardIndex + 1)) {\n        // alow match function to return true for an exit path\n        if (matchFn(module, pkgMeta[dotRel + module], module.split('/').length))\n          return;\n      }\n    }\n    // exact meta\n    var exactMeta = pkgMeta[subPath] && pkgMeta.hasOwnProperty && pkgMeta.hasOwnProperty(subPath) ? pkgMeta[subPath] : pkgMeta['./' + subPath];\n    if (exactMeta)\n      matchFn(exactMeta, exactMeta, 0);\n  }\n\n  hook('locate', function(locate) {\n    return function(load) {\n      var loader = this;\n      return Promise.resolve(locate.call(this, load))\n      .then(function(address) {\n        var pkgName = getPackage(loader, load.name);\n        if (pkgName) {\n          var pkg = loader.packages[pkgName];\n          var subPath = load.name.substr(pkgName.length + 1);\n\n          var meta = {};\n          if (pkg.meta) {\n            var bestDepth = 0;\n\n            // NB support a main shorthand in meta here?\n            getMetaMatches(pkg.meta, subPath, function(metaPattern, matchMeta, matchDepth) {\n              if (matchDepth > bestDepth)\n                bestDepth = matchDepth;\n              extendMeta(meta, matchMeta, matchDepth && bestDepth > matchDepth);\n            });\n\n            extendMeta(load.metadata, meta);\n          }\n\n          // format\n          if (pkg.format && !load.metadata.loader)\n            load.metadata.format = load.metadata.format || pkg.format;\n        }\n\n        return address;\n      });\n    };\n  });\n\n})();\n/*\n * Script tag fetch\n *\n * When load.metadata.scriptLoad is true, we load via script tag injection.\n */\n(function() {\n\n  if (typeof document != 'undefined')\n    var head = document.getElementsByTagName('head')[0];\n\n  var curSystem;\n  var curRequire;\n\n  // if doing worker executing, this is set to the load record being executed\n  var workerLoad = null;\n  \n  // interactive mode handling method courtesy RequireJS\n  var ieEvents = head && (function() {\n    var s = document.createElement('script');\n    var isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]';\n    return s.attachEvent && !(s.attachEvent.toString && s.attachEvent.toString().indexOf('[native code') < 0) && !isOpera;\n  })();\n\n  // IE interactive-only part\n  // we store loading scripts array as { script: <script>, load: {...} }\n  var interactiveLoadingScripts = [];\n  var interactiveScript;\n  function getInteractiveScriptLoad() {\n    if (interactiveScript && interactiveScript.script.readyState === 'interactive')\n      return interactiveScript.load;\n\n    for (var i = 0; i < interactiveLoadingScripts.length; i++)\n      if (interactiveLoadingScripts[i].script.readyState == 'interactive') {\n        interactiveScript = interactiveLoadingScripts[i];\n        return interactiveScript.load;\n      }\n  }\n  \n  // System.register, System.registerDynamic, AMD define pipeline\n  // this is called by the above methods when they execute\n  // we then run the reduceRegister_ collection function either immediately\n  // if we are in IE and know the currently executing script (interactive)\n  // or later if we need to wait for the synchronous load callback to know the script\n  var loadingCnt = 0;\n  var registerQueue = [];\n  hook('pushRegister_', function(pushRegister) {\n    return function(register) {\n      // if using eval-execution then skip\n      if (pushRegister.call(this, register))\n        return false;\n\n      // if using worker execution, then we're done\n      if (workerLoad)\n        this.reduceRegister_(workerLoad, register);\n\n      // detect if we know the currently executing load (IE)\n      // if so, immediately call reduceRegister\n      else if (ieEvents)\n        this.reduceRegister_(getInteractiveScriptLoad(), register);\n\n      // otherwise, add to our execution queue\n      // to call reduceRegister on sync script load event\n      else if (loadingCnt)\n        registerQueue.push(register);\n\n      // if we're not currently loading anything though\n      // then do the reduction against a null load\n      // (out of band named define or named register)\n      // note even in non-script environments, this catch is used\n      else\n        this.reduceRegister_(null, register);\n\n      return true;\n    };\n  });\n\n  function webWorkerImport(loader, load) {\n    return new Promise(function(resolve, reject) {\n      if (load.metadata.integrity)\n        reject(new Error('Subresource integrity checking is not supported in web workers.'));\n\n      workerLoad = load;\n      try {\n        importScripts(load.address);\n      }\n      catch(e) {\n        workerLoad = null;\n        reject(e);\n      }\n      workerLoad = null;\n\n      // if nothing registered, then something went wrong\n      if (!load.metadata.entry)\n        reject(new Error(load.address + ' did not call System.register or AMD define. If loading a global, ensure the meta format is set to global.'));\n\n      resolve('');\n    });\n  }\n\n  // override fetch to use script injection\n  hook('fetch', function(fetch) {\n    return function(load) {\n      var loader = this;\n\n      if (load.metadata.format == 'json' || !load.metadata.scriptLoad || (!isBrowser && !isWorker))\n        return fetch.call(this, load);\n\n      if (isWorker)\n        return webWorkerImport(loader, load);\n\n      return new Promise(function(resolve, reject) {\n        var s = document.createElement('script');\n        \n        s.async = true;\n\n        if (load.metadata.crossOrigin)\n          s.crossOrigin = load.metadata.crossOrigin;\n\n        if (load.metadata.integrity)\n          s.setAttribute('integrity', load.metadata.integrity);\n\n        if (ieEvents) {\n          s.attachEvent('onreadystatechange', complete);\n          interactiveLoadingScripts.push({\n            script: s,\n            load: load\n          });\n        }\n        else {\n          s.addEventListener('load', complete, false);\n          s.addEventListener('error', error, false);\n        }\n\n        loadingCnt++;\n\n        curSystem = __global.System;\n        curRequire = __global.require;\n\n        s.src = load.address;\n        head.appendChild(s);\n\n        function complete(evt) {\n          if (s.readyState && s.readyState != 'loaded' && s.readyState != 'complete')\n            return;\n\n          loadingCnt--;\n\n          // complete call is sync on execution finish\n          // (in ie already done reductions)\n          if (!load.metadata.entry && !registerQueue.length) {\n            loader.reduceRegister_(load);\n          }\n          else if (!ieEvents) {\n            for (var i = 0; i < registerQueue.length; i++)\n              loader.reduceRegister_(load, registerQueue[i]);\n            registerQueue = [];\n          }\n\n          cleanup();\n\n          // if nothing registered, then something went wrong\n          if (!load.metadata.entry && !load.metadata.bundle)\n            reject(new Error(load.name + ' did not call System.register or AMD define. If loading a global module configure the global name via the meta exports property for script injection support.'));\n\n          resolve('');\n        }\n\n        function error(evt) {\n          cleanup();\n          reject(new Error('Unable to load script ' + load.address));\n        }\n\n        function cleanup() {\n          __global.System = curSystem;\n          __global.require = curRequire;\n\n          if (s.detachEvent) {\n            s.detachEvent('onreadystatechange', complete);\n            for (var i = 0; i < interactiveLoadingScripts.length; i++)\n              if (interactiveLoadingScripts[i].script == s) {\n                if (interactiveScript && interactiveScript.script == s)\n                  interactiveScript = null;\n                interactiveLoadingScripts.splice(i, 1);\n              }\n          }\n          else {\n            s.removeEventListener('load', complete, false);\n            s.removeEventListener('error', error, false);\n          }\n\n          head.removeChild(s);\n        }\n      });\n    };\n  });\n})();\n/*\n * Instantiate registry extension\n *\n * Supports Traceur System.register 'instantiate' output for loading ES6 as ES5.\n *\n * - Creates the loader.register function\n * - Also supports metadata.format = 'register' in instantiate for anonymous register modules\n * - Also supports metadata.deps, metadata.execute and metadata.executingRequire\n *     for handling dynamic modules alongside register-transformed ES6 modules\n *\n *\n * The code here replicates the ES6 linking groups algorithm to ensure that\n * circular ES6 compiled into System.register can work alongside circular AMD \n * and CommonJS, identically to the actual ES6 loader.\n *\n */\n\n\n/*\n * Registry side table entries in loader.defined\n * Registry Entry Contains:\n *    - name\n *    - deps \n *    - declare for declarative modules\n *    - execute for dynamic modules, different to declarative execute on module\n *    - executingRequire indicates require drives execution for circularity of dynamic modules\n *    - declarative optional boolean indicating which of the above\n *\n * Can preload modules directly on SystemJS.defined['my/module'] = { deps, execute, executingRequire }\n *\n * Then the entry gets populated with derived information during processing:\n *    - normalizedDeps derived from deps, created in instantiate\n *    - groupIndex used by group linking algorithm\n *    - evaluated indicating whether evaluation has happend\n *    - module the module record object, containing:\n *      - exports actual module exports\n *\n *    For dynamic we track the es module with:\n *    - esModule actual es module value\n *    - esmExports whether to extend the esModule with named exports\n *      \n *    Then for declarative only we track dynamic bindings with the 'module' records:\n *      - name\n *      - exports\n *      - setters declarative setter functions\n *      - dependencies, module records of dependencies\n *      - importers, module records of dependents\n *\n * After linked and evaluated, entries are removed, declarative module records remain in separate\n * module binding table\n *\n */\n\nvar leadingCommentAndMetaRegEx = /^(\\s*\\/\\*[^\\*]*(\\*(?!\\/)[^\\*]*)*\\*\\/|\\s*\\/\\/[^\\n]*|\\s*\"[^\"]+\"\\s*;?|\\s*'[^']+'\\s*;?)*\\s*/;\nfunction detectRegisterFormat(source) {\n  var leadingCommentAndMeta = source.match(leadingCommentAndMetaRegEx);\n  return leadingCommentAndMeta && source.substr(leadingCommentAndMeta[0].length, 15) == 'System.register';\n}\n\nfunction createEntry() {\n  return {\n    name: null,\n    deps: null,\n    originalIndices: null,\n    declare: null,\n    execute: null,\n    executingRequire: false,\n    declarative: false,\n    normalizedDeps: null,\n    groupIndex: null,\n    evaluated: false,\n    module: null,\n    esModule: null,\n    esmExports: false\n  };\n}\n\n(function() {\n\n  /*\n   * There are two variations of System.register:\n   * 1. System.register for ES6 conversion (2-3 params) - System.register([name, ]deps, declare)\n   *    see https://github.com/ModuleLoader/es6-module-loader/wiki/System.register-Explained\n   *\n   * 2. System.registerDynamic for dynamic modules (3-4 params) - System.registerDynamic([name, ]deps, executingRequire, execute)\n   * the true or false statement \n   *\n   * this extension implements the linking algorithm for the two variations identical to the spec\n   * allowing compiled ES6 circular references to work alongside AMD and CJS circular references.\n   *\n   */\n  SystemJSLoader.prototype.register = function(name, deps, declare) {\n    if (typeof name != 'string') {\n      declare = deps;\n      deps = name;\n      name = null;\n    }\n\n    // dynamic backwards-compatibility\n    // can be deprecated eventually\n    if (typeof declare == 'boolean')\n      return this.registerDynamic.apply(this, arguments);\n\n    var entry = createEntry();\n    // ideally wouldn't apply map config to bundle names but \n    // dependencies go through map regardless so we can't restrict\n    // could reconsider in shift to new spec\n    entry.name = name && (this.decanonicalize || this.normalize).call(this, name);\n    entry.declarative = true;\n    entry.deps = deps;\n    entry.declare = declare;\n\n    this.pushRegister_({\n      amd: false,\n      entry: entry\n    });\n  };\n  SystemJSLoader.prototype.registerDynamic = function(name, deps, declare, execute) {\n    if (typeof name != 'string') {\n      execute = declare;\n      declare = deps;\n      deps = name;\n      name = null;\n    }\n\n    // dynamic\n    var entry = createEntry();\n    entry.name = name && (this.decanonicalize || this.normalize).call(this, name);\n    entry.deps = deps;\n    entry.execute = execute;\n    entry.executingRequire = declare;\n\n    this.pushRegister_({\n      amd: false,\n      entry: entry\n    });\n  };\n  hook('reduceRegister_', function() {\n    return function(load, register) {\n      if (!register)\n        return;\n\n      var entry = register.entry;\n      var curMeta = load && load.metadata;\n\n      // named register\n      if (entry.name) {\n        if (!(entry.name in this.defined))\n          this.defined[entry.name] = entry;\n\n        if (curMeta)\n          curMeta.bundle = true;\n      }\n      // anonymous register\n      if (!entry.name || load && !curMeta.entry && entry.name == load.name) {\n        if (!curMeta)\n          throw new TypeError('Invalid System.register call. Anonymous System.register calls can only be made by modules loaded by SystemJS.import and not via script tags.');\n        if (curMeta.entry) {\n          if (curMeta.format == 'register')\n            throw new Error('Multiple anonymous System.register calls in module ' + load.name + '. If loading a bundle, ensure all the System.register calls are named.');\n          else\n            throw new Error('Module ' + load.name + ' interpreted as ' + curMeta.format + ' module format, but called System.register.');\n        }\n        if (!curMeta.format)\n          curMeta.format = 'register';\n        curMeta.entry = entry;\n      }\n    };\n  });\n\n  hookConstructor(function(constructor) {\n    return function() {\n      constructor.call(this);\n\n      this.defined = {};\n      this._loader.moduleRecords = {};\n    };\n  });\n\n  function buildGroups(entry, loader, groups) {\n    groups[entry.groupIndex] = groups[entry.groupIndex] || [];\n\n    if (indexOf.call(groups[entry.groupIndex], entry) != -1)\n      return;\n\n    groups[entry.groupIndex].push(entry);\n\n    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {\n      var depName = entry.normalizedDeps[i];\n      var depEntry = loader.defined[depName];\n      \n      // not in the registry means already linked / ES6\n      if (!depEntry || depEntry.evaluated)\n        continue;\n      \n      // now we know the entry is in our unlinked linkage group\n      var depGroupIndex = entry.groupIndex + (depEntry.declarative != entry.declarative);\n\n      // the group index of an entry is always the maximum\n      if (depEntry.groupIndex === null || depEntry.groupIndex < depGroupIndex) {\n        \n        // if already in a group, remove from the old group\n        if (depEntry.groupIndex !== null) {\n          groups[depEntry.groupIndex].splice(indexOf.call(groups[depEntry.groupIndex], depEntry), 1);\n\n          // if the old group is empty, then we have a mixed depndency cycle\n          if (groups[depEntry.groupIndex].length == 0)\n            throw new Error(\"Mixed dependency cycle detected\");\n        }\n\n        depEntry.groupIndex = depGroupIndex;\n      }\n\n      buildGroups(depEntry, loader, groups);\n    }\n  }\n\n  function link(name, startEntry, loader) {\n    // skip if already linked\n    if (startEntry.module)\n      return;\n\n    startEntry.groupIndex = 0;\n\n    var groups = [];\n\n    buildGroups(startEntry, loader, groups);\n\n    var curGroupDeclarative = !!startEntry.declarative == groups.length % 2;\n    for (var i = groups.length - 1; i >= 0; i--) {\n      var group = groups[i];\n      for (var j = 0; j < group.length; j++) {\n        var entry = group[j];\n\n        // link each group\n        if (curGroupDeclarative)\n          linkDeclarativeModule(entry, loader);\n        else\n          linkDynamicModule(entry, loader);\n      }\n      curGroupDeclarative = !curGroupDeclarative; \n    }\n  }\n\n  // module binding records\n  function ModuleRecord() {}\n  defineProperty(ModuleRecord, 'toString', {\n    value: function() {\n      return 'Module';\n    }\n  });\n\n  function getOrCreateModuleRecord(name, moduleRecords) {\n    return moduleRecords[name] || (moduleRecords[name] = {\n      name: name,\n      dependencies: [],\n      exports: new ModuleRecord(), // start from an empty module and extend\n      importers: []\n    });\n  }\n\n  function linkDeclarativeModule(entry, loader) {\n    // only link if already not already started linking (stops at circular)\n    if (entry.module)\n      return;\n\n    var moduleRecords = loader._loader.moduleRecords;\n    var module = entry.module = getOrCreateModuleRecord(entry.name, moduleRecords);\n    var exports = entry.module.exports;\n\n    var declaration = entry.declare.call(__global, function(name, value) {\n      module.locked = true;\n\n      if (typeof name == 'object') {\n        for (var p in name)\n          exports[p] = name[p];\n      }\n      else {\n        exports[name] = value;\n      }\n\n      for (var i = 0, l = module.importers.length; i < l; i++) {\n        var importerModule = module.importers[i];\n        if (!importerModule.locked) {\n          var importerIndex = indexOf.call(importerModule.dependencies, module);\n          var setter = importerModule.setters[importerIndex];\n          if (setter)\n            setter(exports);\n        }\n      }\n\n      module.locked = false;\n      return value;\n    }, { id: entry.name });\n\n    if (typeof declaration == 'function')\n      declaration = { setters: [], execute: declaration };\n\n    // allowing undefined declaration was a mistake! To be deprecated.\n    declaration = declaration || { setters: [], execute: function() {} };\n    \n    module.setters = declaration.setters;\n    module.execute = declaration.execute;\n\n    if (!module.setters || !module.execute) {\n      throw new TypeError('Invalid System.register form for ' + entry.name);\n    }\n\n    // now link all the module dependencies\n    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {\n      var depName = entry.normalizedDeps[i];\n      var depEntry = loader.defined[depName];\n      var depModule = moduleRecords[depName];\n\n      // work out how to set depExports based on scenarios...\n      var depExports;\n\n      if (depModule) {\n        depExports = depModule.exports;\n      }\n      // dynamic, already linked in our registry\n      else if (depEntry && !depEntry.declarative) {\n        depExports = depEntry.esModule;\n      }\n      // in the loader registry\n      else if (!depEntry) {\n        depExports = loader.get(depName);\n      }\n      // we have an entry -> link\n      else {\n        linkDeclarativeModule(depEntry, loader);\n        depModule = depEntry.module;\n        depExports = depModule.exports;\n      }\n\n      // only declarative modules have dynamic bindings\n      if (depModule && depModule.importers) {\n        depModule.importers.push(module);\n        module.dependencies.push(depModule);\n      }\n      else {\n        module.dependencies.push(null);\n      }\n      \n      // run setters for all entries with the matching dependency name\n      var originalIndices = entry.originalIndices[i];\n      for (var j = 0, len = originalIndices.length; j < len; ++j) {\n        var index = originalIndices[j];\n        if (module.setters[index]) {\n          module.setters[index](depExports);\n        }\n      }\n    }\n  }\n\n  // An analog to loader.get covering execution of all three layers (real declarative, simulated declarative, simulated dynamic)\n  function getModule(name, loader) {\n    var exports;\n    var entry = loader.defined[name];\n\n    if (!entry) {\n      exports = loader.get(name);\n      if (!exports)\n        throw new Error('Unable to load dependency ' + name + '.');\n    }\n\n    else {\n      if (entry.declarative)\n        ensureEvaluated(name, entry, [], loader);\n    \n      else if (!entry.evaluated)\n        linkDynamicModule(entry, loader);\n\n      exports = entry.module.exports;\n    }\n\n    if ((!entry || entry.declarative) && exports && exports.__useDefault)\n      return exports['default'];\n    \n    return exports;\n  }\n\n  function linkDynamicModule(entry, loader) {\n    if (entry.module)\n      return;\n\n    var exports = {};\n\n    var module = entry.module = { exports: exports, id: entry.name };\n\n    // AMD requires execute the tree first\n    if (!entry.executingRequire) {\n      for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {\n        var depName = entry.normalizedDeps[i];\n        // we know we only need to link dynamic due to linking algorithm\n        var depEntry = loader.defined[depName];\n        if (depEntry)\n          linkDynamicModule(depEntry, loader);\n      }\n    }\n\n    // now execute\n    entry.evaluated = true;\n    var output = entry.execute.call(__global, function(name) {\n      for (var i = 0, l = entry.deps.length; i < l; i++) {\n        if (entry.deps[i] != name)\n          continue;\n        return getModule(entry.normalizedDeps[i], loader);\n      }\n      // try and normalize the dependency to see if we have another form\n      var nameNormalized = loader.normalizeSync(name, entry.name);\n      if (indexOf.call(entry.normalizedDeps, nameNormalized) != -1)\n        return getModule(nameNormalized, loader);\n\n      throw new Error('Module ' + name + ' not declared as a dependency of ' + entry.name);\n    }, exports, module);\n    \n    if (output !== undefined)\n      module.exports = output;\n\n    // create the esModule object, which allows ES6 named imports of dynamics\n    exports = module.exports;\n\n    // __esModule flag treats as already-named\n    if (exports && (exports.__esModule || exports instanceof Module))\n      entry.esModule = loader.newModule(exports);\n    // set module as 'default' export, then fake named exports by iterating properties\n    else if (entry.esmExports && exports !== __global)\n      entry.esModule = loader.newModule(getESModule(exports));\n    // just use the 'default' export\n    else\n      entry.esModule = loader.newModule({ 'default': exports, __useDefault: true });\n  }\n\n  /*\n   * Given a module, and the list of modules for this current branch,\n   *  ensure that each of the dependencies of this module is evaluated\n   *  (unless one is a circular dependency already in the list of seen\n   *  modules, in which case we execute it)\n   *\n   * Then we evaluate the module itself depth-first left to right \n   * execution to match ES6 modules\n   */\n  function ensureEvaluated(moduleName, entry, seen, loader) {\n    // if already seen, that means it's an already-evaluated non circular dependency\n    if (!entry || entry.evaluated || !entry.declarative)\n      return;\n\n    // this only applies to declarative modules which late-execute\n\n    seen.push(moduleName);\n\n    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {\n      var depName = entry.normalizedDeps[i];\n      if (indexOf.call(seen, depName) == -1) {\n        if (!loader.defined[depName])\n          loader.get(depName);\n        else\n          ensureEvaluated(depName, loader.defined[depName], seen, loader);\n      }\n    }\n\n    if (entry.evaluated)\n      return;\n\n    entry.evaluated = true;\n    entry.module.execute.call(__global);\n  }\n\n  // override the delete method to also clear the register caches\n  hook('delete', function(del) {\n    return function(name) {\n      delete this._loader.moduleRecords[name];\n      delete this.defined[name];\n      return del.call(this, name);\n    };\n  });\n\n  hook('fetch', function(fetch) {\n    return function(load) {\n      if (this.defined[load.name]) {\n        load.metadata.format = 'defined';\n        return '';\n      }\n\n      load.metadata.deps = load.metadata.deps || [];\n      \n      return fetch.call(this, load);\n    };\n  });\n\n  hook('translate', function(translate) {\n    // we run the meta detection here (register is after meta)\n    return function(load) {\n      load.metadata.deps = load.metadata.deps || [];\n      return Promise.resolve(translate.apply(this, arguments)).then(function(source) {\n        // run detection for register format\n        if (load.metadata.format == 'register' || !load.metadata.format && detectRegisterFormat(load.source))\n          load.metadata.format = 'register';\n        return source;\n      });\n    };\n  });\n\n  // implement a perforance shortpath for System.load with no deps\n  hook('load', function(doLoad) {\n    return function(normalized) {\n      var loader = this;\n      var entry = loader.defined[normalized];\n\n      if (!entry || entry.deps.length)\n        return doLoad.apply(this, arguments);\n\n      entry.originalIndices = entry.normalizedDeps = [];\n\n      // recursively ensure that the module and all its \n      // dependencies are linked (with dependency group handling)\n      link(normalized, entry, loader);\n\n      // now handle dependency execution in correct order\n      ensureEvaluated(normalized, entry, [], loader);\n      if (!entry.esModule)\n        entry.esModule = loader.newModule(entry.module.exports);\n\n      // remove from the registry\n      if (!loader.trace)\n        loader.defined[normalized] = undefined;\n\n      // return the defined module object\n      loader.set(normalized, entry.esModule);\n\n      return Promise.resolve();\n    };\n  });\n\n  hook('instantiate', function(instantiate) {\n    return function(load) {\n      if (load.metadata.format == 'detect')\n        load.metadata.format = undefined;\n\n      // assumes previous instantiate is sync\n      // (core json support)\n      instantiate.call(this, load);\n\n      var loader = this;\n\n      var entry;\n\n      // first we check if this module has already been defined in the registry\n      if (loader.defined[load.name]) {\n        entry = loader.defined[load.name];\n        // don't support deps for ES modules\n        if (!entry.declarative)\n          entry.deps = entry.deps.concat(load.metadata.deps);\n        entry.deps = entry.deps.concat(load.metadata.deps);\n      }\n\n      // picked up already by an anonymous System.register script injection\n      // or via the dynamic formats\n      else if (load.metadata.entry) {\n        entry = load.metadata.entry;\n        entry.deps = entry.deps.concat(load.metadata.deps);\n      }\n\n      // Contains System.register calls\n      // (dont run bundles in the builder)\n      else if (!(loader.builder && load.metadata.bundle) \n          && (load.metadata.format == 'register' || load.metadata.format == 'esm' || load.metadata.format == 'es6')) {\n        \n        if (typeof __exec != 'undefined')\n          __exec.call(loader, load);\n\n        if (!load.metadata.entry && !load.metadata.bundle)\n          throw new Error(load.name + ' detected as ' + load.metadata.format + ' but didn\\'t execute.');\n\n        entry = load.metadata.entry;\n\n        // support metadata deps for System.register\n        if (entry && load.metadata.deps)\n          entry.deps = entry.deps.concat(load.metadata.deps);\n      }\n\n      // named bundles are just an empty module\n      if (!entry) {\n        entry = createEntry();\n        entry.deps = load.metadata.deps;\n        entry.execute = function() {};\n      }\n\n      // place this module onto defined for circular references\n      loader.defined[load.name] = entry;\n      \n      var grouped = group(entry.deps);\n      \n      entry.deps = grouped.names;\n      entry.originalIndices = grouped.indices;\n      entry.name = load.name;\n      entry.esmExports = load.metadata.esmExports !== false;\n\n      // first, normalize all dependencies\n      var normalizePromises = [];\n      for (var i = 0, l = entry.deps.length; i < l; i++)\n        normalizePromises.push(Promise.resolve(loader.normalize(entry.deps[i], load.name)));\n\n      return Promise.all(normalizePromises).then(function(normalizedDeps) {\n\n        entry.normalizedDeps = normalizedDeps;\n\n        return {\n          deps: entry.deps,\n          execute: function() {\n            // recursively ensure that the module and all its \n            // dependencies are linked (with dependency group handling)\n            link(load.name, entry, loader);\n\n            // now handle dependency execution in correct order\n            ensureEvaluated(load.name, entry, [], loader);\n\n            if (!entry.esModule)\n              entry.esModule = loader.newModule(entry.module.exports);\n\n            // remove from the registry\n            if (!loader.trace)\n              loader.defined[load.name] = undefined;\n\n            // return the defined module object\n            return entry.esModule;\n          }\n        };\n      });\n    };\n  });\n})();\n/*\n * Extension to detect ES6 and auto-load Traceur or Babel for processing\n */\n(function() {\n  // good enough ES6 module detection regex - format detections not designed to be accurate, but to handle the 99% use case\n  var esmRegEx = /(^\\s*|[}\\);\\n]\\s*)(import\\s*(['\"]|(\\*\\s+as\\s+)?[^\"'\\(\\)\\n;]+\\s*from\\s*['\"]|\\{)|export\\s+\\*\\s+from\\s+[\"']|export\\s*(\\{|default|function|class|var|const|let|async\\s+function))/;\n\n  var traceurRuntimeRegEx = /\\$traceurRuntime\\s*\\./;\n  var babelHelpersRegEx = /babelHelpers\\s*\\./;\n\n  hook('translate', function(translate) {\n    return function(load) {\n      var loader = this;\n      var args = arguments;\n      return translate.apply(loader, args)\n      .then(function(source) {\n        // detect & transpile ES6\n        if (load.metadata.format == 'esm' || load.metadata.format == 'es6' || !load.metadata.format && source.match(esmRegEx)) {\n          if (load.metadata.format == 'es6')\n            warn.call(loader, 'Module ' + load.name + ' has metadata setting its format to \"es6\", which is deprecated.\\nThis should be updated to \"esm\".');\n\n          load.metadata.format = 'esm';\n\n          if (load.metadata.deps) {\n            var depInject = '';\n            for (var i = 0; i < load.metadata.deps.length; i++)\n              depInject += 'import \"' + load.metadata.deps[i] + '\"; ';\n            load.source = depInject + source;\n          }\n\n          if (loader.transpiler === false) {\n            // we accept translation to esm for builds though to enable eg rollup optimizations\n            if (loader.builder)\n              return source;\n            throw new TypeError('Unable to dynamically transpile ES module as SystemJS.transpiler set to false.');\n          }\n\n          // setting _loader.loadedTranspiler = false tells the next block to\n          // do checks for setting transpiler metadata\n          loader._loader.loadedTranspiler = loader._loader.loadedTranspiler || false;\n          if (loader.pluginLoader)\n            loader.pluginLoader._loader.loadedTranspiler = loader._loader.loadedTranspiler || false;\n\n          // do transpilation\n          return (loader._loader.transpilerPromise || (\n            loader._loader.transpilerPromise = Promise.resolve(\n              __global[loader.transpiler == 'typescript' ? 'ts' : loader.transpiler] || (loader.pluginLoader || loader).normalize(loader.transpiler)\n              .then(function(normalized) {\n                loader._loader.transpilerNormalized = normalized;\n                return (loader.pluginLoader || loader).load(normalized)\n                .then(function() {\n                  return (loader.pluginLoader || loader).get(normalized);\n                });\n              })\n          ))).then(function(transpiler) {\n            loader._loader.loadedTranspilerRuntime = true;\n\n            // translate hooks means this is a transpiler plugin instead of a raw implementation\n            if (transpiler.translate) {\n              // if transpiler is the same as the plugin loader, then don't run twice\n              if (transpiler == load.metadata.loaderModule)\n                return load.source;\n              load.metadata.loaderModule = transpiler;\n              load.metadata.loader = loader._loader.transpilerNormalized;\n\n              // convert the source map into an object for transpilation chaining\n              if (typeof load.metadata.sourceMap == 'string')\n                load.metadata.sourceMap = JSON.parse(load.metadata.sourceMap);\n\n              return Promise.resolve(transpiler.translate.apply(loader, args))\n              .then(function(source) {\n                // sanitize sourceMap if an object not a JSON string\n                var sourceMap = load.metadata.sourceMap;\n                if (sourceMap && typeof sourceMap == 'object') {\n                  var originalName = load.address.split('!')[0];\n\n                  // force set the filename of the original file\n                  if (!sourceMap.file || sourceMap.file == load.address)\n                    sourceMap.file = originalName + '!transpiled';\n\n                  // force set the sources list if only one source\n                  if (!sourceMap.sources || sourceMap.sources.length <= 1 && (!sourceMap.sources[0] || sourceMap.sources[0] == load.address))\n                    sourceMap.sources = [originalName];\n                }\n\n                if (load.metadata.format == 'esm' && !loader.builder && detectRegisterFormat(source))\n                  load.metadata.format = 'register';\n                return source;\n              });\n            }\n\n            // legacy builder support\n            if (loader.builder)\n              load.metadata.originalSource = load.source;\n\n            // defined in es6-module-loader/src/transpile.js\n            return transpile.call(loader, load)\n            .then(function(source) {\n              // clear sourceMap as transpiler embeds it\n              load.metadata.sourceMap = undefined;\n              return source;\n            });\n          }, function(err) {\n            throw addToError(err, 'Unable to load transpiler to transpile ' + load.name);\n          });\n        }\n\n        // skip transpiler and transpiler runtime loading when transpiler is disabled\n        if (loader.transpiler === false)\n          return source;\n\n        // load the transpiler correctly\n        if (loader._loader.loadedTranspiler === false && (loader.transpiler == 'traceur' || loader.transpiler == 'typescript' || loader.transpiler == 'babel')\n            && load.name == loader.normalizeSync(loader.transpiler)) {\n\n          // always load transpiler as a global\n          if (source.length > 100 && !load.metadata.format) {\n            load.metadata.format = 'global';\n\n            if (loader.transpiler === 'traceur')\n              load.metadata.exports = 'traceur';\n            if (loader.transpiler === 'typescript')\n              load.metadata.exports = 'ts';\n          }\n\n          loader._loader.loadedTranspiler = true;\n        }\n\n        // load the transpiler runtime correctly\n        if (loader._loader.loadedTranspilerRuntime === false) {\n          if (load.name == loader.normalizeSync('traceur-runtime')\n              || load.name == loader.normalizeSync('babel/external-helpers*')) {\n            if (source.length > 100)\n              load.metadata.format = load.metadata.format || 'global';\n\n            loader._loader.loadedTranspilerRuntime = true;\n          }\n        }\n\n        // detect transpiler runtime usage to load runtimes\n        if ((load.metadata.format == 'register' || load.metadata.bundle) && loader._loader.loadedTranspilerRuntime !== true) {\n          if (loader.transpiler == 'traceur' && !__global.$traceurRuntime && load.source.match(traceurRuntimeRegEx)) {\n            loader._loader.loadedTranspilerRuntime = loader._loader.loadedTranspilerRuntime || false;\n            return loader['import']('traceur-runtime').then(function() {\n              return source;\n            });\n          }\n          if (loader.transpiler == 'babel' && !__global.babelHelpers && load.source.match(babelHelpersRegEx)) {\n            loader._loader.loadedTranspilerRuntime = loader._loader.loadedTranspilerRuntime || false;\n            return loader['import']('babel/external-helpers').then(function() {\n              return source;\n            });\n          }\n        }\n\n        return source;\n      });\n    };\n  });\n\n})();\n/*\n  SystemJS Global Format\n\n  Supports\n    metadata.deps\n    metadata.globals\n    metadata.exports\n\n  Without metadata.exports, detects writes to the global object.\n*/\nvar __globalName = typeof self != 'undefined' ? 'self' : 'global';\n\nhook('fetch', function(fetch) {\n  return function(load) {\n    if (load.metadata.exports && !load.metadata.format)\n      load.metadata.format = 'global';\n    return fetch.call(this, load);\n  };\n});\n\n// ideally we could support script loading for globals, but the issue with that is that\n// we can't do it with AMD support side-by-side since AMD support means defining the\n// global define, and global support means not definining it, yet we don't have any hook\n// into the \"pre-execution\" phase of a script tag being loaded to handle both cases\nhook('instantiate', function(instantiate) {\n  return function(load) {\n    var loader = this;\n\n    if (!load.metadata.format)\n      load.metadata.format = 'global';\n\n    // global is a fallback module format\n    if (load.metadata.format == 'global' && !load.metadata.entry) {\n\n      var entry = createEntry();\n\n      load.metadata.entry = entry;\n\n      entry.deps = [];\n\n      for (var g in load.metadata.globals) {\n        var gl = load.metadata.globals[g];\n        if (gl)\n          entry.deps.push(gl);\n      }\n\n      entry.execute = function(require, exports, module) {\n\n        var globals;\n        if (load.metadata.globals) {\n          globals = {};\n          for (var g in load.metadata.globals)\n            if (load.metadata.globals[g])\n              globals[g] = require(load.metadata.globals[g]);\n        }\n        \n        var exportName = load.metadata.exports;\n\n        if (exportName)\n          load.source += '\\n' + __globalName + '[\"' + exportName + '\"] = ' + exportName + ';';\n\n        var retrieveGlobal = loader.get('@@global-helpers').prepareGlobal(module.id, exportName, globals, !!load.metadata.encapsulateGlobal);\n        __exec.call(loader, load);\n\n        return retrieveGlobal();\n      }\n    }\n    return instantiate.call(this, load);\n  };\n});\n\n\nfunction getGlobalValue(exports) {\n  if (typeof exports == 'string')\n    return readMemberExpression(exports, __global);\n\n  if (!(exports instanceof Array))\n    throw new Error('Global exports must be a string or array.');\n\n  var globalValue = {};\n  var first = true;\n  for (var i = 0; i < exports.length; i++) {\n    var val = readMemberExpression(exports[i], __global);\n    if (first) {\n      globalValue['default'] = val;\n      first = false;\n    }\n    globalValue[exports[i].split('.').pop()] = val;\n  }\n  return globalValue;\n}\n\nhook('reduceRegister_', function(reduceRegister) {\n  return function(load, register) {\n    if (register || (!load.metadata.exports && !(isWorker && load.metadata.format == 'global')))\n      return reduceRegister.call(this, load, register);\n\n    load.metadata.format = 'global';\n    var entry = load.metadata.entry = createEntry();\n    entry.deps = load.metadata.deps;\n    var globalValue = getGlobalValue(load.metadata.exports);\n    entry.execute = function() {\n      return globalValue;\n    };\n  };\n});\n\nhookConstructor(function(constructor) {\n  return function() {\n    var loader = this;\n    constructor.call(loader);\n\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n    // bare minimum ignores\n    var ignoredGlobalProps = ['_g', 'sessionStorage', 'localStorage', 'clipboardData', 'frames', 'frameElement', 'external', \n      'mozAnimationStartTime', 'webkitStorageInfo', 'webkitIndexedDB', 'mozInnerScreenY', 'mozInnerScreenX'];\n\n    var globalSnapshot;\n\n    function forEachGlobal(callback) {\n      if (Object.keys)\n        Object.keys(__global).forEach(callback);\n      else\n        for (var g in __global) {\n          if (!hasOwnProperty.call(__global, g))\n            continue;\n          callback(g);\n        }\n    }\n\n    function forEachGlobalValue(callback) {\n      forEachGlobal(function(globalName) {\n        if (indexOf.call(ignoredGlobalProps, globalName) != -1)\n          return;\n        try {\n          var value = __global[globalName];\n        }\n        catch (e) {\n          ignoredGlobalProps.push(globalName);\n        }\n        callback(globalName, value);\n      });\n    }\n\n    loader.set('@@global-helpers', loader.newModule({\n      prepareGlobal: function(moduleName, exports, globals, encapsulate) {\n        // disable module detection\n        var curDefine = __global.define;\n        \n        __global.define = undefined;\n\n        // set globals\n        var oldGlobals;\n        if (globals) {\n          oldGlobals = {};\n          for (var g in globals) {\n            oldGlobals[g] = __global[g];\n            __global[g] = globals[g];\n          }\n        }\n\n        // store a complete copy of the global object in order to detect changes\n        if (!exports) {\n          globalSnapshot = {};\n\n          forEachGlobalValue(function(name, value) {\n            globalSnapshot[name] = value;\n          });\n        }\n\n        // return function to retrieve global\n        return function() {\n          var globalValue = exports ? getGlobalValue(exports) : {};\n\n          var singleGlobal;\n          var multipleExports = !!exports;\n\n          if (!exports || encapsulate)\n            forEachGlobalValue(function(name, value) {\n              if (globalSnapshot[name] === value)\n                return;\n              if (typeof value == 'undefined')\n                return;\n              \n              // allow global encapsulation where globals are removed\n              if (encapsulate)\n                __global[name] = undefined;\n\n              if (!exports) {\n                globalValue[name] = value;\n\n                if (typeof singleGlobal != 'undefined') {\n                  if (!multipleExports && singleGlobal !== value)\n                    multipleExports = true;\n                }\n                else {\n                  singleGlobal = value;\n                }\n              }\n            });\n\n          globalValue = multipleExports ? globalValue : singleGlobal;\n\n          // revert globals\n          if (oldGlobals) {\n            for (var g in oldGlobals)\n              __global[g] = oldGlobals[g];\n          }\n          __global.define = curDefine;\n\n          return globalValue;\n        };\n      }\n    }));\n  };\n});\n/*\n  SystemJS CommonJS Format\n*/\n(function() {\n  // CJS Module Format\n  // require('...') || exports[''] = ... || exports.asd = ... || module.exports = ...\n  var cjsExportsRegEx = /(?:^\\uFEFF?|[^$_a-zA-Z\\xA0-\\uFFFF.])(exports\\s*(\\[['\"]|\\.)|module(\\.exports|\\['exports'\\]|\\[\"exports\"\\])\\s*(\\[['\"]|[=,\\.]))/;\n  // RegEx adjusted from https://github.com/jbrantly/yabble/blob/master/lib/yabble.js#L339\n  var cjsRequireRegEx = /(?:^\\uFEFF?|[^$_a-zA-Z\\xA0-\\uFFFF.\"'])require\\s*\\(\\s*(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')\\s*\\)/g;\n  var commentRegEx = /(^|[^\\\\])(\\/\\*([\\s\\S]*?)\\*\\/|([^:]|^)\\/\\/(.*)$)/mg;\n\n  var stringRegEx = /(\"[^\"\\\\\\n\\r]*(\\\\.[^\"\\\\\\n\\r]*)*\"|'[^'\\\\\\n\\r]*(\\\\.[^'\\\\\\n\\r]*)*')/g;\n\n  // used to support leading #!/usr/bin/env in scripts as supported in Node\n  var hashBangRegEx = /^\\#\\!.*/;\n\n  function getCJSDeps(source) {\n    cjsRequireRegEx.lastIndex = commentRegEx.lastIndex = stringRegEx.lastIndex = 0;\n\n    var deps = [];\n\n    var match;\n\n    // track string and comment locations for unminified source    \n    var stringLocations = [], commentLocations = [];\n\n    function inLocation(locations, match) {\n      for (var i = 0; i < locations.length; i++)\n        if (locations[i][0] < match.index && locations[i][1] > match.index)\n          return true;\n      return false;\n    }\n\n    if (source.length / source.split('\\n').length < 200) {\n      while (match = stringRegEx.exec(source))\n        stringLocations.push([match.index, match.index + match[0].length]);\n\n      // TODO: track template literals here before comments\n      \n      while (match = commentRegEx.exec(source)) {\n        // only track comments not starting in strings\n        if (!inLocation(stringLocations, match))\n          commentLocations.push([match.index + match[1].length, match.index + match[0].length - 1]);\n      }\n    }\n\n    while (match = cjsRequireRegEx.exec(source)) {\n      // ensure we're not within a string or comment location\n      if (!inLocation(stringLocations, match) && !inLocation(commentLocations, match)) {\n        var dep = match[1].substr(1, match[1].length - 2);\n        // skip cases like require('\" + file + \"')\n        if (dep.match(/\"|'/))\n          continue;\n        // trailing slash requires are removed as they don't map mains in SystemJS\n        if (dep[dep.length - 1] == '/')\n          dep = dep.substr(0, dep.length - 1);\n        deps.push(dep);\n      }\n    }\n\n    return deps;\n  }\n\n  hook('instantiate', function(instantiate) {\n    return function(load) {\n      var loader = this;\n      if (!load.metadata.format) {\n        cjsExportsRegEx.lastIndex = 0;\n        cjsRequireRegEx.lastIndex = 0;\n        if (cjsRequireRegEx.exec(load.source) || cjsExportsRegEx.exec(load.source))\n          load.metadata.format = 'cjs';\n      }\n\n      if (load.metadata.format == 'cjs') {\n        var metaDeps = load.metadata.deps;\n        var deps = load.metadata.cjsRequireDetection === false ? [] : getCJSDeps(load.source);\n\n        for (var g in load.metadata.globals)\n          if (load.metadata.globals[g])\n            deps.push(load.metadata.globals[g]);\n\n        var entry = createEntry();\n\n        load.metadata.entry = entry;\n\n        entry.deps = deps;\n        entry.executingRequire = true;\n        entry.execute = function(_require, exports, module) {\n          function require(name) {\n            if (name[name.length - 1] == '/')\n              name = name.substr(0, name.length - 1);\n            return _require.apply(this, arguments);\n          }\n          require.resolve = function(name) {\n            return loader.get('@@cjs-helpers').requireResolve(name, module.id);\n          };\n          // support module.paths ish\n          module.paths = [];\n          module.require = _require;\n\n          // ensure meta deps execute first\n          if (!load.metadata.cjsDeferDepsExecute)\n            for (var i = 0; i < metaDeps.length; i++)\n              require(metaDeps[i]);\n\n          var pathVars = loader.get('@@cjs-helpers').getPathVars(module.id);\n          var __cjsWrapper = {\n            exports: exports,\n            args: [require, exports, module, pathVars.filename, pathVars.dirname, __global, __global]\n          };\n\n          var cjsWrapper = \"(function(require, exports, module, __filename, __dirname, global, GLOBAL\";\n\n          // add metadata.globals to the wrapper arguments\n          if (load.metadata.globals)\n            for (var g in load.metadata.globals) {\n              __cjsWrapper.args.push(require(load.metadata.globals[g]));\n              cjsWrapper += \", \" + g;\n            }\n\n          // disable AMD detection\n          var define = __global.define;\n          __global.define = undefined;\n          __global.__cjsWrapper = __cjsWrapper;\n\n          load.source = cjsWrapper + \") {\" + load.source.replace(hashBangRegEx, '') + \"\\n}).apply(__cjsWrapper.exports, __cjsWrapper.args);\";\n\n          __exec.call(loader, load);\n\n          __global.__cjsWrapper = undefined;\n          __global.define = define;\n        };\n      }\n\n      return instantiate.call(loader, load);\n    };\n  });\n})();\nhookConstructor(function(constructor) {\n  return function() {\n    var loader = this;\n    constructor.call(loader);\n\n    if (typeof window != 'undefined' && typeof document != 'undefined' && window.location)\n      var windowOrigin = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '');\n\n    function stripOrigin(path) {\n      if (path.substr(0, 8) == 'file:///')\n        return path.substr(7 + !!isWindows);\n      \n      if (windowOrigin && path.substr(0, windowOrigin.length) == windowOrigin)\n        return path.substr(windowOrigin.length);\n\n      return path;\n    }\n\n    loader.set('@@cjs-helpers', loader.newModule({\n      requireResolve: function(request, parentId) {\n        return stripOrigin(loader.normalizeSync(request, parentId));\n      },\n      getPathVars: function(moduleId) {\n        // remove any plugin syntax\n        var pluginIndex = moduleId.lastIndexOf('!');\n        var filename;\n        if (pluginIndex != -1)\n          filename = moduleId.substr(0, pluginIndex);\n        else\n          filename = moduleId;\n\n        var dirname = filename.split('/');\n        dirname.pop();\n        dirname = dirname.join('/');\n\n        return {\n          filename: stripOrigin(filename),\n          dirname: stripOrigin(dirname)\n        };\n      }\n    }))\n  };\n});/*\n * AMD Helper function module\n * Separated into its own file as this is the part needed for full AMD support in SFX builds\n * NB since implementations have now diverged this can be merged back with amd.js\n */\n\nhook('fetch', function(fetch) {\n  return function(load) {\n    // script load implies define global leak\n    if (load.metadata.scriptLoad && isBrowser)\n      __global.define = this.amdDefine;\n    return fetch.call(this, load);\n  };\n});\n \nhookConstructor(function(constructor) {\n  return function() {\n    var loader = this;\n    constructor.call(this);\n\n    var commentRegEx = /(\\/\\*([\\s\\S]*?)\\*\\/|([^:]|^)\\/\\/(.*)$)/mg;\n    var cjsRequirePre = \"(?:^|[^$_a-zA-Z\\\\xA0-\\\\uFFFF.])\";\n    var cjsRequirePost = \"\\\\s*\\\\(\\\\s*(\\\"([^\\\"]+)\\\"|'([^']+)')\\\\s*\\\\)\";\n    var fnBracketRegEx = /\\(([^\\)]*)\\)/;\n    var wsRegEx = /^\\s+|\\s+$/g;\n    \n    var requireRegExs = {};\n\n    function getCJSDeps(source, requireIndex) {\n\n      // remove comments\n      source = source.replace(commentRegEx, '');\n\n      // determine the require alias\n      var params = source.match(fnBracketRegEx);\n      var requireAlias = (params[1].split(',')[requireIndex] || 'require').replace(wsRegEx, '');\n\n      // find or generate the regex for this requireAlias\n      var requireRegEx = requireRegExs[requireAlias] || (requireRegExs[requireAlias] = new RegExp(cjsRequirePre + requireAlias + cjsRequirePost, 'g'));\n\n      requireRegEx.lastIndex = 0;\n\n      var deps = [];\n\n      var match;\n      while (match = requireRegEx.exec(source))\n        deps.push(match[2] || match[3]);\n\n      return deps;\n    }\n\n    /*\n      AMD-compatible require\n      To copy RequireJS, set window.require = window.requirejs = loader.amdRequire\n    */\n    function require(names, callback, errback, referer) {\n      // in amd, first arg can be a config object... we just ignore\n      if (typeof names == 'object' && !(names instanceof Array))\n        return require.apply(null, Array.prototype.splice.call(arguments, 1, arguments.length - 1));\n\n      // amd require\n      if (typeof names == 'string' && typeof callback == 'function')\n        names = [names];\n      if (names instanceof Array) {\n        var dynamicRequires = [];\n        for (var i = 0; i < names.length; i++)\n          dynamicRequires.push(loader['import'](names[i], referer));\n        Promise.all(dynamicRequires).then(function(modules) {\n          if (callback)\n            callback.apply(null, modules);\n        }, errback);\n      }\n\n      // commonjs require\n      else if (typeof names == 'string') {\n        var defaultJSExtension = loader.defaultJSExtensions && names.substr(names.length - 3, 3) != '.js';\n        var normalized = loader.decanonicalize(names, referer);\n        if (defaultJSExtension && normalized.substr(normalized.length - 3, 3) == '.js')\n          normalized = normalized.substr(0, normalized.length - 3);\n        var module = loader.get(normalized);\n        if (!module)\n          throw new Error('Module not already loaded loading \"' + names + '\" as ' + normalized + (referer ? ' from \"' + referer + '\".' : '.'));\n        return module.__useDefault ? module['default'] : module;\n      }\n\n      else\n        throw new TypeError('Invalid require');\n    }\n\n    function define(name, deps, factory) {\n      if (typeof name != 'string') {\n        factory = deps;\n        deps = name;\n        name = null;\n      }\n      if (!(deps instanceof Array)) {\n        factory = deps;\n        deps = ['require', 'exports', 'module'].splice(0, factory.length);\n      }\n\n      if (typeof factory != 'function')\n        factory = (function(factory) {\n          return function() { return factory; }\n        })(factory);\n\n      // in IE8, a trailing comma becomes a trailing undefined entry\n      if (deps[deps.length - 1] === undefined)\n        deps.pop();\n\n      // remove system dependencies\n      var requireIndex, exportsIndex, moduleIndex;\n      \n      if ((requireIndex = indexOf.call(deps, 'require')) != -1) {\n        \n        deps.splice(requireIndex, 1);\n\n        // only trace cjs requires for non-named\n        // named defines assume the trace has already been done\n        if (!name)\n          deps = deps.concat(getCJSDeps(factory.toString(), requireIndex));\n      }\n\n      if ((exportsIndex = indexOf.call(deps, 'exports')) != -1)\n        deps.splice(exportsIndex, 1);\n      \n      if ((moduleIndex = indexOf.call(deps, 'module')) != -1)\n        deps.splice(moduleIndex, 1);\n\n      function execute(req, exports, module) {\n        var depValues = [];\n        for (var i = 0; i < deps.length; i++)\n          depValues.push(req(deps[i]));\n\n        module.uri = module.id;\n\n        module.config = function() {};\n\n        // add back in system dependencies\n        if (moduleIndex != -1)\n          depValues.splice(moduleIndex, 0, module);\n        \n        if (exportsIndex != -1)\n          depValues.splice(exportsIndex, 0, exports);\n        \n        if (requireIndex != -1) {\n          function contextualRequire(names, callback, errback) {\n            if (typeof names == 'string' && typeof callback != 'function')\n              return req(names);\n            return require.call(loader, names, callback, errback, module.id);\n          }\n          contextualRequire.toUrl = function(name) {\n            // normalize without defaultJSExtensions\n            var defaultJSExtension = loader.defaultJSExtensions && name.substr(name.length - 3, 3) != '.js';\n            var url = loader.decanonicalize(name, module.id);\n            if (defaultJSExtension && url.substr(url.length - 3, 3) == '.js')\n              url = url.substr(0, url.length - 3);\n            return url;\n          };\n          depValues.splice(requireIndex, 0, contextualRequire);\n        }\n\n        // set global require to AMD require\n        var curRequire = __global.require;\n        __global.require = require;\n\n        var output = factory.apply(exportsIndex == -1 ? __global : exports, depValues);\n\n        __global.require = curRequire;\n\n        if (typeof output == 'undefined' && module)\n          output = module.exports;\n\n        if (typeof output != 'undefined')\n          return output;\n      }\n\n      var entry = createEntry();\n      entry.name = name && (loader.decanonicalize || loader.normalize).call(loader, name);\n      entry.deps = deps;\n      entry.execute = execute;\n\n      loader.pushRegister_({\n        amd: true,\n        entry: entry\n      });\n    }\n    define.amd = {};\n\n    // reduction function to attach defines to a load record\n    hook('reduceRegister_', function(reduceRegister) {\n      return function(load, register) {\n        // only handle AMD registers here\n        if (!register || !register.amd)\n          return reduceRegister.call(this, load, register);\n\n        var curMeta = load && load.metadata;\n        var entry = register.entry;\n\n        if (curMeta) {\n          if (!curMeta.format || curMeta.format == 'detect')\n            curMeta.format = 'amd';\n          else if (!entry.name && curMeta.format != 'amd')\n            throw new Error('AMD define called while executing ' + curMeta.format + ' module ' + load.name);\n        }\n\n        // anonymous define\n        if (!entry.name) {\n          if (!curMeta)\n            throw new TypeError('Unexpected anonymous AMD define.');\n\n          if (curMeta.entry && !curMeta.entry.name)\n            throw new Error('Multiple anonymous defines in module ' + load.name);\n          \n          curMeta.entry = entry;\n        }\n        // named define\n        else {\n          // if we don't have any other defines, \n          // then let this be an anonymous define\n          // this is just to support single modules of the form:\n          // define('jquery')\n          // still loading anonymously\n          // because it is done widely enough to be useful\n          // as soon as there is more than one define, this gets removed though\n          if (curMeta) {\n            if (!curMeta.entry && !curMeta.bundle)\n              curMeta.entry = entry;\n            else if (curMeta.entry && curMeta.entry.name && curMeta.entry.name != load.name)\n              curMeta.entry = undefined;\n\n            // note this is now a bundle\n            curMeta.bundle = true;\n          }\n\n          // define the module through the register registry\n          if (!(entry.name in this.defined))\n            this.defined[entry.name] = entry;\n        }\n      };\n    });\n\n    loader.amdDefine = define;\n    loader.amdRequire = require;\n  };\n});/*\n  SystemJS AMD Format\n*/\n(function() {\n  // AMD Module Format Detection RegEx\n  // define([.., .., ..], ...)\n  // define(varName); || define(function(require, exports) {}); || define({})\n  var amdRegEx = /(?:^\\uFEFF?|[^$_a-zA-Z\\xA0-\\uFFFF.])define\\s*\\(\\s*(\"[^\"]+\"\\s*,\\s*|'[^']+'\\s*,\\s*)?\\s*(\\[(\\s*((\"[^\"]+\"|'[^']+')\\s*,|\\/\\/.*\\r?\\n|\\/\\*(.|\\s)*?\\*\\/))*(\\s*(\"[^\"]+\"|'[^']+')\\s*,?)?(\\s*(\\/\\/.*\\r?\\n|\\/\\*(.|\\s)*?\\*\\/))*\\s*\\]|function\\s*|{|[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*\\))/;\n\n  hook('instantiate', function(instantiate) {\n    return function(load) {\n      var loader = this;\n      \n      if (load.metadata.format == 'amd' || !load.metadata.format && load.source.match(amdRegEx)) {\n        load.metadata.format = 'amd';\n        \n        if (!loader.builder && loader.execute !== false) {\n          var curDefine = __global.define;\n          __global.define = this.amdDefine;\n\n          try {\n            __exec.call(loader, load);\n          }\n          finally {\n            __global.define = curDefine;\n          }\n\n          if (!load.metadata.entry && !load.metadata.bundle)\n            throw new TypeError('AMD module ' + load.name + ' did not define');\n        }\n        else {\n          load.metadata.execute = function() {\n            return load.metadata.builderExecute.apply(this, arguments);\n          };\n        }\n      }\n\n      return instantiate.call(loader, load);\n    };\n  });\n\n})();\n/*\n  SystemJS Loader Plugin Support\n\n  Supports plugin loader syntax with \"!\", or via metadata.loader\n\n  The plugin name is loaded as a module itself, and can override standard loader hooks\n  for the plugin resource. See the plugin section of the systemjs readme.\n*/\n\n(function() {\n  function getParentName(loader, parentName) {\n    // if parent is a plugin, normalize against the parent plugin argument only\n    if (parentName) {\n      var parentPluginIndex;\n      if (loader.pluginFirst) {\n        if ((parentPluginIndex = parentName.lastIndexOf('!')) != -1)\n          return parentName.substr(parentPluginIndex + 1);\n      }\n      else {\n        if ((parentPluginIndex = parentName.indexOf('!')) != -1)\n          return parentName.substr(0, parentPluginIndex);\n      }\n\n      return parentName;\n    }\n  }\n\n  function parsePlugin(loader, name) {\n    var argumentName;\n    var pluginName;\n\n    var pluginIndex = name.lastIndexOf('!');\n\n    if (pluginIndex == -1)\n      return;\n\n    if (loader.pluginFirst) {\n      argumentName = name.substr(pluginIndex + 1);\n      pluginName = name.substr(0, pluginIndex);\n    }\n    else {\n      argumentName = name.substr(0, pluginIndex);\n      pluginName = name.substr(pluginIndex + 1) || argumentName.substr(argumentName.lastIndexOf('.') + 1);\n    }\n\n    return {\n      argument: argumentName,\n      plugin: pluginName\n    };\n  }\n\n  // put name back together after parts have been normalized\n  function combinePluginParts(loader, argumentName, pluginName, defaultExtension) {\n    if (defaultExtension && argumentName.substr(argumentName.length - 3, 3) == '.js')\n      argumentName = argumentName.substr(0, argumentName.length - 3);\n\n    if (loader.pluginFirst) {\n      return pluginName + '!' + argumentName;\n    }\n    else {\n      return argumentName + '!' + pluginName;\n    }\n  }\n\n  // note if normalize will add a default js extension\n  // if so, remove for backwards compat\n  // this is strange and sucks, but will be deprecated\n  function checkDefaultExtension(loader, arg) {\n    return loader.defaultJSExtensions && arg.substr(arg.length - 3, 3) != '.js'; \n  }\n\n  function createNormalizeSync(normalizeSync) {\n    return function(name, parentName, isPlugin) {\n      var loader = this;\n      \n      var parsed = parsePlugin(loader, name);\n      parentName = getParentName(this, parentName);\n\n      if (!parsed)\n        return normalizeSync.call(this, name, parentName, isPlugin);\n\n      // if this is a plugin, normalize the plugin name and the argument\n      var argumentName = loader.normalizeSync(parsed.argument, parentName, true);\n      var pluginName = loader.normalizeSync(parsed.plugin, parentName, true);\n      return combinePluginParts(loader, argumentName, pluginName, checkDefaultExtension(loader, parsed.argument));\n    };\n  }\n  \n  hook('decanonicalize', createNormalizeSync);\n  hook('normalizeSync', createNormalizeSync);\n\n  hook('normalize', function(normalize) {\n    return function(name, parentName, isPlugin) {\n      var loader = this;\n\n      parentName = getParentName(this, parentName);\n\n      var parsed = parsePlugin(loader, name);\n\n      if (!parsed)\n        return normalize.call(loader, name, parentName, isPlugin);\n\n      return Promise.all([\n        loader.normalize(parsed.argument, parentName, true),\n        loader.normalize(parsed.plugin, parentName, false)\n      ])\n      .then(function(normalized) {\n        return combinePluginParts(loader, normalized[0], normalized[1], checkDefaultExtension(loader, parsed.argument));\n      });\n    }\n  });\n\n  hook('locate', function(locate) {\n    return function(load) {\n      var loader = this;\n\n      var name = load.name;\n\n      // plugin syntax\n      var pluginSyntaxIndex;\n      if (loader.pluginFirst) {\n        if ((pluginSyntaxIndex = name.indexOf('!')) != -1) {\n          load.metadata.loader = name.substr(0, pluginSyntaxIndex);\n          load.name = name.substr(pluginSyntaxIndex + 1);\n        }\n      }\n      else {\n        if ((pluginSyntaxIndex = name.lastIndexOf('!')) != -1) {\n          load.metadata.loader = name.substr(pluginSyntaxIndex + 1);\n          load.name = name.substr(0, pluginSyntaxIndex);\n        }\n      }\n\n      return locate.call(loader, load)\n      .then(function(address) {\n        if (pluginSyntaxIndex != -1 || !load.metadata.loader)\n          return address;\n\n        // normalize plugin relative to parent in locate here when\n        // using plugin via loader metadata\n        return (loader.pluginLoader || loader).normalize(load.metadata.loader, load.name)\n        .then(function(loaderNormalized) {\n          load.metadata.loader = loaderNormalized;\n          return address;\n        });\n      })\n      .then(function(address) {\n        var plugin = load.metadata.loader;\n\n        if (!plugin)\n          return address;\n\n        // don't allow a plugin to load itself\n        if (load.name == plugin)\n          throw new Error('Plugin ' + plugin + ' cannot load itself, make sure it is excluded from any wildcard meta configuration via a custom loader: false rule.');\n\n        // only fetch the plugin itself if this name isn't defined\n        if (loader.defined && loader.defined[name])\n          return address;\n\n        var pluginLoader = loader.pluginLoader || loader;\n\n        // load the plugin module and run standard locate\n        return pluginLoader['import'](plugin)\n        .then(function(loaderModule) {\n          // store the plugin module itself on the metadata\n          load.metadata.loaderModule = loaderModule;\n\n          load.address = address;\n          if (loaderModule.locate)\n            return loaderModule.locate.call(loader, load);\n\n          return address;\n        });\n      });\n    };\n  });\n\n  hook('fetch', function(fetch) {\n    return function(load) {\n      var loader = this;\n      if (load.metadata.loaderModule && load.metadata.loaderModule.fetch && load.metadata.format != 'defined') {\n        load.metadata.scriptLoad = false;\n        return load.metadata.loaderModule.fetch.call(loader, load, function(load) {\n          return fetch.call(loader, load);\n        });\n      }\n      else {\n        return fetch.call(loader, load);\n      }\n    };\n  });\n\n  hook('translate', function(translate) {\n    return function(load) {\n      var loader = this;\n      var args = arguments;\n      if (load.metadata.loaderModule && load.metadata.loaderModule.translate && load.metadata.format != 'defined') {\n        return Promise.resolve(load.metadata.loaderModule.translate.apply(loader, args)).then(function(result) {\n          var sourceMap = load.metadata.sourceMap;\n\n          // sanitize sourceMap if an object not a JSON string\n          if (sourceMap) {\n            if (typeof sourceMap != 'object')\n              throw new Error('load.metadata.sourceMap must be set to an object.');\n\n            var originalName = load.address.split('!')[0];\n            \n            // force set the filename of the original file\n            if (!sourceMap.file || sourceMap.file == load.address)\n              sourceMap.file = originalName + '!transpiled';\n\n            // force set the sources list if only one source\n            if (!sourceMap.sources || sourceMap.sources.length <= 1 && (!sourceMap.sources[0] || sourceMap.sources[0] == load.address))\n              sourceMap.sources = [originalName];\n          }\n\n          // if running on file:/// URLs, sourcesContent is necessary\n          // load.metadata.sourceMap.sourcesContent = [load.source];\n\n          if (typeof result == 'string')\n            load.source = result;\n          else\n            warn.call(this, 'Plugin ' + load.metadata.loader + ' should return the source in translate, instead of setting load.source directly. This support will be deprecated.');\n\n          return translate.apply(loader, args);\n        });\n      }\n      else {\n        return translate.apply(loader, args);\n      }\n    };\n  });\n\n  hook('instantiate', function(instantiate) {\n    return function(load) {\n      var loader = this;\n      var calledInstantiate = false;\n\n      if (load.metadata.loaderModule && load.metadata.loaderModule.instantiate && !loader.builder && load.metadata.format != 'defined')\n        return Promise.resolve(load.metadata.loaderModule.instantiate.call(loader, load, function(load) {\n          if (calledInstantiate)\n            throw new Error('Instantiate must only be called once.');\n          calledInstantiate = true;\n          return instantiate.call(loader, load);\n        })).then(function(result) {\n          if (calledInstantiate)\n            return result;\n\n          load.metadata.entry = createEntry();\n          load.metadata.entry.execute = function() {\n            return result;\n          }\n          load.metadata.entry.deps = load.metadata.deps;\n          load.metadata.format = 'defined';\n          return instantiate.call(loader, load);\n        });\n      else\n        return instantiate.call(loader, load);\n    };\n  });\n\n})();/*\n * Conditions Extension\n *\n *   Allows a condition module to alter the resolution of an import via syntax:\n *\n *     import $ from 'jquery/#{browser}';\n *\n *   Will first load the module 'browser' via `SystemJS.import('browser')` and \n *   take the default export of that module.\n *   If the default export is not a string, an error is thrown.\n * \n *   We then substitute the string into the require to get the conditional resolution\n *   enabling environment-specific variations like:\n * \n *     import $ from 'jquery/ie'\n *     import $ from 'jquery/firefox'\n *     import $ from 'jquery/chrome'\n *     import $ from 'jquery/safari'\n *\n *   It can be useful for a condition module to define multiple conditions.\n *   This can be done via the `|` modifier to specify an export member expression:\n *\n *     import 'jquery/#{./browser.js|grade.version}'\n *\n *   Where the `grade` export `version` member in the `browser.js` module  is substituted.\n *\n *\n * Boolean Conditionals\n *\n *   For polyfill modules, that are used as imports but have no module value,\n *   a binary conditional allows a module not to be loaded at all if not needed:\n *\n *     import 'es5-shim#?./conditions.js|needs-es5shim'\n *\n *   These conditions can also be negated via:\n *     \n *     import 'es5-shim#?./conditions.js|~es6'\n *\n */\n\n  var sysConditions = ['browser', 'node', 'dev', 'build', 'production', 'default'];\n\n  function parseCondition(condition) {\n    var conditionExport, conditionModule, negation;\n\n    var negation = condition[0] == '~';\n    var conditionExportIndex = condition.lastIndexOf('|');\n    if (conditionExportIndex != -1) {\n      conditionExport = condition.substr(conditionExportIndex + 1);\n      conditionModule = condition.substr(negation, conditionExportIndex - negation);\n      \n      if (negation)\n        warn.call(this, 'Condition negation form \"' + condition + '\" is deprecated for \"' + conditionModule + '|~' + conditionExport + '\"');\n\n      if (conditionExport[0] == '~') {\n        negation = true;\n        conditionExport = conditionExport.substr(1);\n      }\n    }\n    else {\n      conditionExport = 'default';\n      conditionModule = condition.substr(negation);\n      if (sysConditions.indexOf(conditionModule) != -1) {\n        conditionExport = conditionModule;\n        conditionModule = null;\n      }\n    }\n\n    return {\n      module: conditionModule || '@system-env',\n      prop: conditionExport,\n      negate: negation\n    };\n  }\n\n  function serializeCondition(conditionObj) {\n    return conditionObj.module + '|' + (conditionObj.negate ? '~' : '') + conditionObj.prop;\n  }\n\n  function resolveCondition(conditionObj, parentName, bool) {\n    var self = this;\n    return this.normalize(conditionObj.module, parentName)\n    .then(function(normalizedCondition) {\n      return self.load(normalizedCondition)\n      .then(function(q) {\n        var m = readMemberExpression(conditionObj.prop, self.get(normalizedCondition));\n\n        if (bool && typeof m != 'boolean')\n          throw new TypeError('Condition ' + serializeCondition(conditionObj) + ' did not resolve to a boolean.');\n\n        return conditionObj.negate ? !m : m;\n      });\n    });\n  }\n\n  var interpolationRegEx = /#\\{[^\\}]+\\}/;\n  function interpolateConditional(name, parentName) {\n    // first we normalize the conditional\n    var conditionalMatch = name.match(interpolationRegEx);\n\n    if (!conditionalMatch)\n      return Promise.resolve(name);\n\n    var conditionObj = parseCondition.call(this, conditionalMatch[0].substr(2, conditionalMatch[0].length - 3));\n\n    // in builds, return normalized conditional\n    if (this.builder)\n      return this['normalize'](conditionObj.module, parentName)\n      .then(function(conditionModule) {\n        conditionObj.module = conditionModule;\n        return name.replace(interpolationRegEx, '#{' + serializeCondition(conditionObj) + '}');\n      });\n\n    return resolveCondition.call(this, conditionObj, parentName, false)\n    .then(function(conditionValue) {\n      if (typeof conditionValue !== 'string')\n        throw new TypeError('The condition value for ' + name + ' doesn\\'t resolve to a string.');\n\n      if (conditionValue.indexOf('/') != -1)\n        throw new TypeError('Unabled to interpolate conditional ' + name + (parentName ? ' in ' + parentName : '') + '\\n\\tThe condition value ' + conditionValue + ' cannot contain a \"/\" separator.');\n\n      return name.replace(interpolationRegEx, conditionValue);\n    });\n  }\n\n  function booleanConditional(name, parentName) {\n    // first we normalize the conditional\n    var booleanIndex = name.lastIndexOf('#?');\n\n    if (booleanIndex == -1)\n      return Promise.resolve(name);\n\n    var conditionObj = parseCondition.call(this, name.substr(booleanIndex + 2));\n\n    // in builds, return normalized conditional\n    if (this.builder)\n      return this['normalize'](conditionObj.module, parentName)\n      .then(function(conditionModule) {\n        conditionObj.module = conditionModule;\n        return name.substr(0, booleanIndex) + '#?' + serializeCondition(conditionObj);\n      });\n\n    return resolveCondition.call(this, conditionObj, parentName, true)\n    .then(function(conditionValue) {\n      return conditionValue ? name.substr(0, booleanIndex) : '@empty';\n    });\n  }\n\n  // normalizeSync does not parse conditionals at all although it could\n  hook('normalize', function(normalize) {\n    return function(name, parentName, skipExt) {\n      var loader = this;\n      return booleanConditional.call(loader, name, parentName)\n      .then(function(name) {\n        return normalize.call(loader, name, parentName, skipExt);\n      })\n      .then(function(normalized) {\n        return interpolateConditional.call(loader, normalized, parentName);\n      });\n    };\n  });\n/*\n * Alias Extension\n *\n * Allows a module to be a plain copy of another module by module name\n *\n * SystemJS.meta['mybootstrapalias'] = { alias: 'bootstrap' };\n *\n */\n(function() {\n  // aliases\n  hook('fetch', function(fetch) {\n    return function(load) {\n      var alias = load.metadata.alias;\n      var aliasDeps = load.metadata.deps || [];\n      if (alias) {\n        load.metadata.format = 'defined';\n        var entry = createEntry();\n        this.defined[load.name] = entry;\n        entry.declarative = true;\n        entry.deps = aliasDeps.concat([alias]);\n        entry.declare = function(_export) {\n          return {\n            setters: [function(module) {\n              for (var p in module)\n                _export(p, module[p]);\n              if (module.__useDefault)\n                entry.module.exports.__useDefault = true;\n            }],\n            execute: function() {}\n          };\n        };\n        return '';\n      }\n\n      return fetch.call(this, load);\n    };\n  });\n})();/*\n * Meta Extension\n *\n * Sets default metadata on a load record (load.metadata) from\n * loader.metadata via SystemJS.meta function.\n *\n *\n * Also provides an inline meta syntax for module meta in source.\n *\n * Eg:\n *\n * loader.meta({\n *   'my/module': { deps: ['jquery'] }\n *   'my/*': { format: 'amd' }\n * });\n *\n * Which in turn populates loader.metadata.\n *\n * load.metadata.deps and load.metadata.format will then be set\n * for 'my/module'\n *\n * The same meta could be set with a my/module.js file containing:\n *\n * my/module.js\n *   \"format amd\";\n *   \"deps[] jquery\";\n *   \"globals.some value\"\n *   console.log('this is my/module');\n *\n * Configuration meta always takes preference to inline meta.\n *\n * Multiple matches in wildcards are supported and ammend the meta.\n *\n *\n * The benefits of the function form is that paths are URL-normalized\n * supporting say\n *\n * loader.meta({ './app': { format: 'cjs' } });\n *\n * Instead of needing to set against the absolute URL (https://site.com/app.js)\n *\n */\n\n(function() {\n\n  hookConstructor(function(constructor) {\n    return function() {\n      this.meta = {};\n      constructor.call(this);\n    };\n  });\n\n  hook('locate', function(locate) {\n    return function(load) {\n      var meta = this.meta;\n      var name = load.name;\n\n      // NB for perf, maybe introduce a fast-path wildcard lookup cache here\n      // which is checked first\n\n      // apply wildcard metas\n      var bestDepth = 0;\n      var wildcardIndex;\n      for (var module in meta) {\n        wildcardIndex = module.indexOf('*');\n        if (wildcardIndex === -1)\n          continue;\n        if (module.substr(0, wildcardIndex) === name.substr(0, wildcardIndex)\n            && module.substr(wildcardIndex + 1) === name.substr(name.length - module.length + wildcardIndex + 1)) {\n          var depth = module.split('/').length;\n          if (depth > bestDepth)\n            bestDepth = depth;\n          extendMeta(load.metadata, meta[module], bestDepth != depth);\n        }\n      }\n\n      // apply exact meta\n      if (meta[name])\n        extendMeta(load.metadata, meta[name]);\n\n      return locate.call(this, load);\n    };\n  });\n\n  // detect any meta header syntax\n  // only set if not already set\n  var metaRegEx = /^(\\s*\\/\\*[^\\*]*(\\*(?!\\/)[^\\*]*)*\\*\\/|\\s*\\/\\/[^\\n]*|\\s*\"[^\"]+\"\\s*;?|\\s*'[^']+'\\s*;?)+/;\n  var metaPartRegEx = /\\/\\*[^\\*]*(\\*(?!\\/)[^\\*]*)*\\*\\/|\\/\\/[^\\n]*|\"[^\"]+\"\\s*;?|'[^']+'\\s*;?/g;\n\n  function setMetaProperty(target, p, value) {\n    var pParts = p.split('.');\n    var curPart;\n    while (pParts.length > 1) {\n      curPart = pParts.shift();\n      target = target[curPart] = target[curPart] || {};\n    }\n    curPart = pParts.shift();\n    if (!(curPart in target))\n      target[curPart] = value;\n  }\n\n  hook('translate', function(translate) {\n    return function(load) {\n      // shortpath for bundled\n      if (load.metadata.format == 'defined') {\n        load.metadata.deps = load.metadata.deps || [];\n        return Promise.resolve(load.source);\n      }\n\n      // NB meta will be post-translate pending transpiler conversion to plugins\n      var meta = load.source.match(metaRegEx);\n      if (meta) {\n        var metaParts = meta[0].match(metaPartRegEx);\n\n        for (var i = 0; i < metaParts.length; i++) {\n          var curPart = metaParts[i];\n          var len = curPart.length;\n\n          var firstChar = curPart.substr(0, 1);\n          if (curPart.substr(len - 1, 1) == ';')\n            len--;\n\n          if (firstChar != '\"' && firstChar != \"'\")\n            continue;\n\n          var metaString = curPart.substr(1, curPart.length - 3);\n          var metaName = metaString.substr(0, metaString.indexOf(' '));\n\n          if (metaName) {\n            var metaValue = metaString.substr(metaName.length + 1, metaString.length - metaName.length - 1);\n\n            if (metaName.substr(metaName.length - 2, 2) == '[]') {\n              metaName = metaName.substr(0, metaName.length - 2);\n              load.metadata[metaName] = load.metadata[metaName] || [];\n              load.metadata[metaName].push(metaValue);\n            }\n            else if (load.metadata[metaName] instanceof Array) {\n              // temporary backwards compat for previous \"deps\" syntax\n              warn.call(this, 'Module ' + load.name + ' contains deprecated \"deps ' + metaValue + '\" meta syntax.\\nThis should be updated to \"deps[] ' + metaValue + '\" for pushing to array meta.');\n              load.metadata[metaName].push(metaValue);\n            }\n            else {\n              setMetaProperty(load.metadata, metaName, metaValue);\n            }\n          }\n          else {\n            load.metadata[metaString] = true;\n          }\n        }\n      }\n\n      return translate.apply(this, arguments);\n    };\n  });\n})();\n/*\n  System bundles\n\n  Allows a bundle module to be specified which will be dynamically \n  loaded before trying to load a given module.\n\n  For example:\n  SystemJS.bundles['mybundle'] = ['jquery', 'bootstrap/js/bootstrap']\n\n  Will result in a load to \"mybundle\" whenever a load to \"jquery\"\n  or \"bootstrap/js/bootstrap\" is made.\n\n  In this way, the bundle becomes the request that provides the module\n*/\n\n(function() {\n  // bundles support (just like RequireJS)\n  // bundle name is module name of bundle itself\n  // bundle is array of modules defined by the bundle\n  // when a module in the bundle is requested, the bundle is loaded instead\n  // of the form SystemJS.bundles['mybundle'] = ['jquery', 'bootstrap/js/bootstrap']\n  hookConstructor(function(constructor) {\n    return function() {\n      constructor.call(this);\n      this.bundles = {};\n      this._loader.loadedBundles = {};\n    };\n  });\n\n  // assign bundle metadata for bundle loads\n  hook('locate', function(locate) {\n    return function(load) {\n      var loader = this;\n      var matched = false;\n\n      if (!(load.name in loader.defined))\n        for (var b in loader.bundles) {\n          for (var i = 0; i < loader.bundles[b].length; i++) {\n            var curModule = loader.bundles[b][i];\n\n            if (curModule == load.name) {\n              matched = true;\n              break;\n            }\n\n            // wildcard in bundles does not include / boundaries\n            if (curModule.indexOf('*') != -1) {\n              var parts = curModule.split('*');\n              if (parts.length != 2) {\n                loader.bundles[b].splice(i--, 1);\n                continue;\n              }\n              \n              if (load.name.substring(0, parts[0].length) == parts[0] &&\n                  load.name.substr(load.name.length - parts[1].length, parts[1].length) == parts[1] &&\n                  load.name.substr(parts[0].length, load.name.length - parts[1].length - parts[0].length).indexOf('/') == -1) {\n                matched = true;\n                break;\n              }\n            }\n          }\n\n          if (matched)\n            return loader['import'](b)\n            .then(function() {\n              return locate.call(loader, load);\n            });\n        }\n\n      return locate.call(loader, load);\n    };\n  });\n})();\n/*\n * Dependency Tree Cache\n * \n * Allows a build to pre-populate a dependency trace tree on the loader of \n * the expected dependency tree, to be loaded upfront when requesting the\n * module, avoinding the n round trips latency of module loading, where \n * n is the dependency tree depth.\n *\n * eg:\n * SystemJS.depCache = {\n *  'app': ['normalized', 'deps'],\n *  'normalized': ['another'],\n *  'deps': ['tree']\n * };\n * \n * SystemJS.import('app') \n * // simultaneously starts loading all of:\n * // 'normalized', 'deps', 'another', 'tree'\n * // before \"app\" source is even loaded\n *\n */\n\n(function() {\n  hookConstructor(function(constructor) {\n    return function() {\n      constructor.call(this);\n      this.depCache = {};\n    }\n  });\n\n  hook('locate', function(locate) {\n    return function(load) {\n      var loader = this;\n      // load direct deps, in turn will pick up their trace trees\n      var deps = loader.depCache[load.name];\n      if (deps)\n        for (var i = 0; i < deps.length; i++)\n          loader['import'](deps[i], load.name);\n\n      return locate.call(loader, load);\n    };\n  });\n})();\n  \nSystem = new SystemJSLoader();\n\n__global.SystemJS = System;\nSystem.version = '0.19.40 Standard';\n  if (typeof module == 'object' && module.exports && typeof exports == 'object')\n    module.exports = System;\n\n  __global.System = System;\n\n})(typeof self != 'undefined' ? self : global);}\n\n// auto-load Promise polyfill if needed in the browser\nvar doPolyfill = typeof Promise === 'undefined';\n\n// document.write\nif (typeof document !== 'undefined') {\n  var scripts = document.getElementsByTagName('script');\n  $__curScript = scripts[scripts.length - 1];\n  if (document.currentScript && ($__curScript.defer || $__curScript.async))\n    $__curScript = document.currentScript;\n  if (!$__curScript.src)\n    $__curScript = undefined;\n  if (doPolyfill) {\n    var curPath = $__curScript.src;\n    var basePath = curPath.substr(0, curPath.lastIndexOf('/') + 1);\n    window.systemJSBootstrap = bootstrap;\n    document.write(\n      '<' + 'script type=\"text/javascript\" src=\"' + basePath + 'system-polyfills.js\">' + '<' + '/script>'\n    );\n  }\n  else {\n    bootstrap();\n  }\n}\n// importScripts\nelse if (typeof importScripts !== 'undefined') {\n  var basePath = '';\n  try {\n    throw new Error('_');\n  } catch (e) {\n    e.stack.replace(/(?:at|@).*(http.+):[\\d]+:[\\d]+/, function(m, url) {\n      $__curScript = { src: url };\n      basePath = url.replace(/\\/[^\\/]*$/, '/');\n    });\n  }\n  if (doPolyfill)\n    importScripts(basePath + 'system-polyfills.js');\n  bootstrap();\n}\nelse {\n  $__curScript = typeof __filename != 'undefined' ? { src: __filename } : null;\n  bootstrap();\n}\n\n\n})();\n"],"file":"systemjs/dist/system.src.js","sourceRoot":"/source/"}