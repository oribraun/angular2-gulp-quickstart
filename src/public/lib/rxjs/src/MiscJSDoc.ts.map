{"version":3,"names":[],"mappings":"","sources":["rxjs/src/MiscJSDoc.ts"],"sourcesContent":["/*\n * This file and its definitions are needed just so that ESDoc sees these\n * JSDoc documentation comments. Originally they were meant for some TypeScript\n * interfaces, but TypeScript strips away JSDoc comments near interfaces. Hence,\n * we need these bogus classes, which are not stripped away. This file on the\n * other hand, is not included in the release bundle.\n */\nimport { Subscriber } from './Subscriber';\nimport { TeardownLogic } from './Subscription';\nimport { Observable } from './Observable';\nimport './scheduler/MiscJSDoc';\nimport './observable/dom/MiscJSDoc';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ObservableDoc {\n  /**\n   * Creates a new Observable that will execute the specified function when a\n   * {@link Subscriber} subscribes to it.\n   *\n   * <span class=\"informal\">Creates an Observable with custom logic given in\n   * the `subscribe` function.</span>\n   *\n   * <img src=\"./img/create.png\" width=\"100%\">\n   *\n   * `create` converts a `subscribe` function to an actual Observable. This is\n   * equivalent to calling the Observable constructor. Write the `subscribe`\n   * function so that it behaves as an Observable: It should invoke the\n   * Subscriber's `next`, `error`, and `complete` methods following the\n   * *Observable Contract*. A well-formed Observable must invoke either the\n   * Subscriber's `complete` method exactly once or its `error` method exactly\n   * once, and invoke nothing else thereafter.\n   *\n   * Most of the times you should not need to use `create` because existing\n   * creation operators (together with instance combination operators) allow you\n   * to create an Observable for most of the use cases. However, `create` is\n   * low-level and is able to create any Observable.\n   *\n   * @example <caption>Emit three random numbers, then complete.</caption>\n   * var result = Rx.Observable.create(function (subscriber) {\n   *   subscriber.next(Math.random());\n   *   subscriber.next(Math.random());\n   *   subscriber.next(Math.random());\n   *   subscriber.complete();\n   * });\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {function(subscriber: Subscriber): TeardownLogic} [subscribe] A\n   * function that accepts a {@link Subscriber}, and invokes its `next`,\n   * `error`, and `complete` methods as appropriate, and should return some\n   * logic for tear down, either as a {@link Subscription} or as a function.\n   * @return {Observable} An Observable that, when subscribed, will execute the\n   * specified function.\n   * @static true\n   * @name create\n   * @owner Observable\n   */\n  static create<T>(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic): Observable<T> {\n    return new Observable<T>(subscribe);\n  };\n}\n\n/**\n * An interface for a consumer of push-based notifications delivered by an\n * {@link Observable}.\n *\n * ```ts\n * interface Observer<T> {\n *   closed?: boolean;\n *   next: (value: T) => void;\n *   error: (err: any) => void;\n *   complete: () => void;\n * }\n * ```\n *\n * An object conforming to the Observer interface is usually\n * given to the `observable.subscribe(observer)` method, and the Observable will\n * call the Observer's `next(value)` method to provide notifications. A\n * well-behaved Observable will call an Observer's `complete()` method exactly\n * once or the Observer's `error(err)` method exactly once, as the last\n * notification delivered.\n *\n * @interface\n * @name Observer\n * @noimport true\n */\nexport class ObserverDoc<T> {\n  /**\n   * An optional flag to indicate whether this Observer, when used as a\n   * subscriber, has already been unsubscribed from its Observable.\n   * @type {boolean}\n   */\n  closed: boolean = false;\n  /**\n   * The callback to receive notifications of type `next` from the Observable,\n   * with a value. The Observable may call this method 0 or more times.\n   * @param {T} value The `next` value.\n   * @return {void}\n   */\n  next(value: T): void {\n    return void 0;\n  }\n  /**\n   * The callback to receive notifications of type `error` from the Observable,\n   * with an attached {@link Error}. Notifies the Observer that the Observable\n   * has experienced an error condition.\n   * @param {any} err The `error` exception.\n   * @return {void}\n   */\n  error(err: any): void {\n    return void 0;\n  }\n  /**\n   * The callback to receive a valueless notification of type `complete` from\n   * the Observable. Notifies the Observer that the Observable has finished\n   * sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    return void 0;\n  }\n}\n"],"file":"rxjs/src/MiscJSDoc.ts","sourceRoot":"/source/"}