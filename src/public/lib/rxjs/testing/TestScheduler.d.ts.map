{"version":3,"names":[],"mappings":"","sources":["rxjs/testing/TestScheduler.d.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { VirtualTimeScheduler } from '../scheduler/VirtualTimeScheduler';\nexport declare type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport declare type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\nexport declare class TestScheduler extends VirtualTimeScheduler {\n    assertDeepEqual: (actual: any, expected: any) => boolean | void;\n    private hotObservables;\n    private coldObservables;\n    private flushTests;\n    constructor(assertDeepEqual: (actual: any, expected: any) => boolean | void);\n    createTime(marbles: string): number;\n    createColdObservable<T>(marbles: string, values?: any, error?: any): Observable<T>;\n    createHotObservable<T>(marbles: string, values?: any, error?: any): Subject<T>;\n    private materializeInnerObservable(observable, outerFrame);\n    expectObservable(observable: Observable<any>, unsubscriptionMarbles?: string): ({\n        toBe: observableToBeFn;\n    });\n    expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({\n        toBe: subscriptionLogsToBeFn;\n    });\n    flush(): void;\n    static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog;\n    static parseMarbles(marbles: string, values?: any, errorValue?: any, materializeInnerObservables?: boolean): TestMessage[];\n}\n"],"file":"rxjs/testing/TestScheduler.d.ts","sourceRoot":"/source/"}