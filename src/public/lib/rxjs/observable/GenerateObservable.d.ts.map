{"version":3,"names":[],"mappings":"","sources":["rxjs/observable/GenerateObservable.d.ts"],"sourcesContent":["import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nexport declare type ConditionFunc<S> = (state: S) => boolean;\nexport declare type IterateFunc<S> = (state: S) => S;\nexport declare type ResultFunc<S, T> = (state: S) => T;\nexport interface GenerateBaseOptions<S> {\n    /**\n     * Initial state.\n    */\n    initialState: S;\n    /**\n     * Condition function that accepts state and returns boolean.\n     * When it returns false, the generator stops.\n     * If not specified, a generator never stops.\n    */\n    condition?: ConditionFunc<S>;\n    /**\n     * Iterate function that accepts state and returns new state.\n     */\n    iterate: IterateFunc<S>;\n    /**\n     * Scheduler to use for generation process.\n     * By default, a generator starts immediately.\n    */\n    scheduler?: Scheduler;\n}\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n    /**\n     * Result selection function that accepts state and returns a value to emit.\n     */\n    resultSelector: ResultFunc<S, T>;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport declare class GenerateObservable<T, S> extends Observable<T> {\n    private initialState;\n    private condition;\n    private iterate;\n    private resultSelector;\n    private scheduler;\n    constructor(initialState: S, condition: ConditionFunc<S>, iterate: IterateFunc<S>, resultSelector: ResultFunc<S, T>, scheduler?: Scheduler);\n    /**\n     * Generates an observable sequence by running a state-driven loop\n     * producing the sequence's elements, using the specified scheduler\n     * to send out observer messages.\n     *\n     * <img src=\"./img/generate.png\" width=\"100%\">\n     *\n     * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n     * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n     *\n     * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n     * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n     *\n     * @see {@link from}\n     * @see {@link create}\n     *\n     * @param {S} initialState Initial state.\n     * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n     * @param {function (state: S): S} iterate Iteration step function.\n     * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n     * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n     * @returns {Observable<T>} The generated sequence.\n     */\n    static create<T, S>(initialState: S, condition: ConditionFunc<S>, iterate: IterateFunc<S>, resultSelector: ResultFunc<S, T>, scheduler?: Scheduler): Observable<T>;\n    /**\n     * Generates an observable sequence by running a state-driven loop\n     * producing the sequence's elements, using the specified scheduler\n     * to send out observer messages.\n     * The overload uses state as an emitted value.\n     *\n     * <img src=\"./img/generate.png\" width=\"100%\">\n     *\n     * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n     * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n     *\n     * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n     * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n     *\n     * @see {@link from}\n     * @see {@link create}\n     *\n     * @param {S} initialState Initial state.\n     * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n     * @param {function (state: S): S} iterate Iteration step function.\n     * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n     * @returns {Observable<S>} The generated sequence.\n     */\n    static create<S>(initialState: S, condition: ConditionFunc<S>, iterate: IterateFunc<S>, scheduler?: Scheduler): Observable<S>;\n    /**\n     * Generates an observable sequence by running a state-driven loop\n     * producing the sequence's elements, using the specified scheduler\n     * to send out observer messages.\n     * The overload accepts options object that might contain initial state, iterate,\n     * condition and scheduler.\n     *\n     * <img src=\"./img/generate.png\" width=\"100%\">\n     *\n     * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n     * var res = Rx.Observable.generate({\n     *   initialState: 0,\n     *   condition: x => x < 10,\n     *   iterate: x => x + 1\n     * });\n     *\n     * @see {@link from}\n     * @see {@link create}\n     *\n     * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n     * @returns {Observable<S>} The generated sequence.\n     */\n    static create<S>(options: GenerateBaseOptions<S>): Observable<S>;\n    /**\n     * Generates an observable sequence by running a state-driven loop\n     * producing the sequence's elements, using the specified scheduler\n     * to send out observer messages.\n     * The overload accepts options object that might contain initial state, iterate,\n     * condition, result selector and scheduler.\n     *\n     * <img src=\"./img/generate.png\" width=\"100%\">\n     *\n     * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n     * var res = Rx.Observable.generate({\n     *   initialState: 0,\n     *   condition: x => x < 10,\n     *   iterate: x => x + 1,\n     *   resultSelector: x => x\n     * });\n     *\n     * @see {@link from}\n     * @see {@link create}\n     *\n     * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n     * @returns {Observable<T>} The generated sequence.\n     */\n    static create<T, S>(options: GenerateOptions<T, S>): Observable<T>;\n    protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void;\n    private static dispatch<T, S>(state);\n}\n"],"file":"rxjs/observable/GenerateObservable.d.ts","sourceRoot":"/source/"}