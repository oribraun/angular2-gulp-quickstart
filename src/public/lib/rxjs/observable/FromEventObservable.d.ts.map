{"version":3,"names":[],"mappings":"","sources":["rxjs/observable/FromEventObservable.d.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nexport declare type NodeStyleEventEmmitter = {\n    addListener: (eventName: string, handler: Function) => void;\n    removeListener: (eventName: string, handler: Function) => void;\n};\nexport declare type JQueryStyleEventEmitter = {\n    on: (eventName: string, handler: Function) => void;\n    off: (eventName: string, handler: Function) => void;\n};\nexport declare type EventTargetLike = EventTarget | NodeStyleEventEmmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\nexport declare type EventListenerOptions = {\n    capture?: boolean;\n    passive?: boolean;\n    once?: boolean;\n} | boolean;\nexport declare type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport declare class FromEventObservable<T> extends Observable<T> {\n    private sourceObj;\n    private eventName;\n    private selector;\n    private options;\n    static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n    static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n    static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n    static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n    constructor(sourceObj: EventTargetLike, eventName: string, selector?: SelectorMethodSignature<T>, options?: EventListenerOptions);\n    private static setupSubscription<T>(sourceObj, eventName, handler, subscriber, options?);\n    protected _subscribe(subscriber: Subscriber<T>): void;\n}\n"],"file":"rxjs/observable/FromEventObservable.d.ts","sourceRoot":"/source/"}