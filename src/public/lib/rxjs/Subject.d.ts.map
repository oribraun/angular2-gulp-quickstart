{"version":3,"names":[],"mappings":"","sources":["rxjs/Subject.d.ts"],"sourcesContent":["import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription } from './Subscription';\n/**\n * @class SubjectSubscriber<T>\n */\nexport declare class SubjectSubscriber<T> extends Subscriber<T> {\n    protected destination: Subject<T>;\n    constructor(destination: Subject<T>);\n}\n/**\n * @class Subject<T>\n */\nexport declare class Subject<T> extends Observable<T> implements ISubscription {\n    observers: Observer<T>[];\n    closed: boolean;\n    isStopped: boolean;\n    hasError: boolean;\n    thrownError: any;\n    constructor();\n    static create: Function;\n    lift<R>(operator: Operator<T, R>): Observable<T>;\n    next(value?: T): void;\n    error(err: any): void;\n    complete(): void;\n    unsubscribe(): void;\n    protected _subscribe(subscriber: Subscriber<T>): Subscription;\n    asObservable(): Observable<T>;\n}\n/**\n * @class AnonymousSubject<T>\n */\nexport declare class AnonymousSubject<T> extends Subject<T> {\n    protected destination: Observer<T>;\n    constructor(destination?: Observer<T>, source?: Observable<T>);\n    next(value: T): void;\n    error(err: any): void;\n    complete(): void;\n    protected _subscribe(subscriber: Subscriber<T>): Subscription;\n}\n"],"file":"rxjs/Subject.d.ts","sourceRoot":"/source/"}