{"version":3,"names":[],"mappings":"","sources":["rxjs/operator/share.d.ts"],"sourcesContent":["import { Observable } from '../Observable';\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n * @method share\n * @owner Observable\n */\nexport declare function share<T>(this: Observable<T>): Observable<T>;\n"],"file":"rxjs/operator/share.d.ts","sourceRoot":"/source/"}