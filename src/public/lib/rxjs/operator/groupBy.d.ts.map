{"version":3,"names":[],"mappings":"","sources":["rxjs/operator/groupBy.d.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport declare function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport declare function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport declare function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport declare function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\nexport interface RefCountSubscription {\n    count: number;\n    unsubscribe: () => void;\n    closed: boolean;\n    attemptedToUnsubscribe: boolean;\n}\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport declare class GroupedObservable<K, T> extends Observable<T> {\n    key: K;\n    private groupSubject;\n    private refCountSubscription;\n    constructor(key: K, groupSubject: Subject<T>, refCountSubscription?: RefCountSubscription);\n    protected _subscribe(subscriber: Subscriber<T>): Subscription;\n}\n"],"file":"rxjs/operator/groupBy.d.ts","sourceRoot":"/source/"}