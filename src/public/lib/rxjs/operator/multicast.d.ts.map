{"version":3,"names":[],"mappings":"","sources":["rxjs/operator/multicast.d.ts"],"sourcesContent":["import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nexport declare function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: factoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport declare function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: selector<T>): Observable<T>;\nexport declare type factoryOrValue<T> = T | (() => T);\nexport declare type selector<T> = (source: Observable<T>) => Observable<T>;\nexport declare class MulticastOperator<T> implements Operator<T, T> {\n    private subjectFactory;\n    private selector;\n    constructor(subjectFactory: () => Subject<T>, selector: (source: Observable<T>) => Observable<T>);\n    call(subscriber: Subscriber<T>, source: any): any;\n}\n"],"file":"rxjs/operator/multicast.d.ts","sourceRoot":"/source/"}