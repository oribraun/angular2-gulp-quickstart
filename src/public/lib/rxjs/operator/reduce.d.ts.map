{"version":3,"names":[],"mappings":"","sources":["rxjs/operator/reduce.d.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nexport declare function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport declare function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport declare function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\nexport declare class ReduceOperator<T, R> implements Operator<T, R> {\n    private accumulator;\n    private seed;\n    private hasSeed;\n    constructor(accumulator: (acc: R, value: T) => R, seed?: R, hasSeed?: boolean);\n    call(subscriber: Subscriber<R>, source: any): any;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class ReduceSubscriber<T, R> extends Subscriber<T> {\n    private accumulator;\n    private hasSeed;\n    acc: T | R;\n    hasValue: boolean;\n    constructor(destination: Subscriber<R>, accumulator: (acc: R, value: T) => R, seed: R, hasSeed: boolean);\n    protected _next(value: T): void;\n    private _tryReduce(value);\n    protected _complete(): void;\n}\n"],"file":"rxjs/operator/reduce.d.ts","sourceRoot":"/source/"}