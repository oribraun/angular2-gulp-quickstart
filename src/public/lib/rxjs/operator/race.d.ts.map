{"version":3,"names":[],"mappings":"","sources":["rxjs/operator/race.d.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nexport declare function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport declare function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<T>>>): Observable<R>;\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport declare function raceStatic<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport declare class RaceOperator<T> implements Operator<T, T> {\n    call(subscriber: Subscriber<T>, source: any): TeardownLogic;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n    private hasFirst;\n    private observables;\n    private subscriptions;\n    constructor(destination: Subscriber<T>);\n    protected _next(observable: any): void;\n    protected _complete(): void;\n    notifyNext(outerValue: T, innerValue: T, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, T>): void;\n}\n"],"file":"rxjs/operator/race.d.ts","sourceRoot":"/source/"}