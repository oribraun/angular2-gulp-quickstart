{"version":3,"names":[],"mappings":"","sources":["rxjs/operator/mergeScan.d.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n/**\n * @param project\n * @param seed\n * @param concurrent\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method mergeScan\n * @owner Observable\n */\nexport declare function mergeScan<T, R>(this: Observable<T>, project: (acc: R, value: T) => Observable<R>, seed: R, concurrent?: number): Observable<R>;\nexport declare class MergeScanOperator<T, R> implements Operator<T, R> {\n    private project;\n    private seed;\n    private concurrent;\n    constructor(project: (acc: R, value: T) => Observable<R>, seed: R, concurrent: number);\n    call(subscriber: Subscriber<R>, source: any): any;\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport declare class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n    private project;\n    private acc;\n    private concurrent;\n    private hasValue;\n    private hasCompleted;\n    private buffer;\n    private active;\n    protected index: number;\n    constructor(destination: Subscriber<R>, project: (acc: R, value: T) => Observable<R>, acc: R, concurrent: number);\n    protected _next(value: any): void;\n    private _innerSub(ish, value, index);\n    protected _complete(): void;\n    notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, R>): void;\n    notifyComplete(innerSub: Subscription): void;\n}\n"],"file":"rxjs/operator/mergeScan.d.ts","sourceRoot":"/source/"}