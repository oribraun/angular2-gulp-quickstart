{"version":3,"names":[],"mappings":"","sources":["rxjs/operator/skipUntil.d.ts"],"sourcesContent":["import { Observable } from '../Observable';\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport declare function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T>;\n"],"file":"rxjs/operator/skipUntil.d.ts","sourceRoot":"/source/"}