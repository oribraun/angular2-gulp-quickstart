{"version":3,"names":[],"mappings":"","sources":["rxjs/operator/every.d.ts"],"sourcesContent":["import { Observable } from '../Observable';\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n * @param {function} predicate a function for determining if an item meets a specified condition.\n * @param {any} [thisArg] optional object to use for `this` in the callback\n * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport declare function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<boolean>;\n"],"file":"rxjs/operator/every.d.ts","sourceRoot":"/source/"}